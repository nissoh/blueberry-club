{
  "address": "0x31A9E0d5E70739669156c0861F9fF23d40c1CF66",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "baseTokenURI",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "_baseTokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mintAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "adminMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "sig",
          "type": "bytes"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "freezeBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "isBlacklisted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "max",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxMintPerTx",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mintAmount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "publicSaleStarted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        }
      ],
      "name": "setBaseTokenURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "setCost",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "signer",
          "type": "address"
        }
      ],
      "name": "setWLSigner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startPublicSale",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startWLMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenURIFrozen",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "walletOfOwner",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mintAmount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "sig",
          "type": "bytes"
        }
      ],
      "name": "whitelistMint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wlMintStarted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wlSigner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x8acb01f8d37b72f3aa1b1feb8292c6d990c6f9dd785def1b2cabcd57f680bb6e",
  "receipt": {
    "to": null,
    "from": "0xF6743941C28bde28e337DBc29356f2319B41Fa3c",
    "contractAddress": "0x31A9E0d5E70739669156c0861F9fF23d40c1CF66",
    "transactionIndex": 0,
    "gasUsed": "23399200",
    "logsBloom": "0x
    "blockHash": "0x382e46266c9976d5041e2a90de78322a2753b4104884637fb447d1dddec4a460",
    "transactionHash": "0x8acb01f8d37b72f3aa1b1feb8292c6d990c6f9dd785def1b2cabcd57f680bb6e",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 13481606,
        "transactionHash": "0x8acb01f8d37b72f3aa1b1feb8292c6d990c6f9dd785def1b2cabcd57f680bb6e",
        "address": "0x31A9E0d5E70739669156c0861F9fF23d40c1CF66",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f6743941c28bde28e337dbc29356f2319b41fa3c"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x382e46266c9976d5041e2a90de78322a2753b4104884637fb447d1dddec4a460"
      }
    ],
    "blockNumber": 13481606,
    "cumulativeGasUsed": "570319",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "Blueberry Club",
    "GBC",
    ""
  ],
  "numDeployments": 1,
  "solcInputHash": "d9b63976ce6dd21bf7032ddac5023b9f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"baseTokenURI\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_baseTokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"adminMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"freezeBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"max\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMintPerTx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintAmount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicSaleStarted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"setBaseTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setCost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"setWLSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startPublicSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startWLMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenURIFrozen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"walletOfOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"whitelistMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wlMintStarted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wlSigner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/core/GBC.sol\":\"GBC\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x0b606994df12f0ce35f6d2f6dcdde7e55e6899cdef7e00f180980caa81e3844e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x0a79511df8151b10b0a0004d6a76ad956582d32824af4c0f4886bdbdfe5746e5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"src/core/GBC.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract GBC is Context, Ownable, ERC721Enumerable {\\n    using Counters for Counters.Counter;\\n    Counters.Counter private _tokenIdTracker;\\n\\n    string public _baseTokenURI;\\n    uint256 public max = 10000;\\n    uint256 public maxMintPerTx = 20;\\n\\n    bool public publicSaleStarted = false;\\n    bool public wlMintStarted = false;\\n\\n    bool public tokenURIFrozen = false;\\n    uint256 public cost = 0.03 ether;\\n\\n    address public wlSigner;\\n    mapping(address => bool) blacklist;\\n\\n    constructor(\\n        string memory name,\\n        string memory symbol,\\n        string memory baseTokenURI\\n    ) ERC721(name, symbol) {\\n        _baseTokenURI = baseTokenURI;\\n        _tokenIdTracker.increment();\\n        wlSigner = address(this);\\n    }\\n\\n    function _baseURI() internal view virtual override returns (string memory) {\\n        return _baseTokenURI;\\n    }\\n\\n    function adminMint(uint256 _mintAmount, address _to) external onlyOwner {\\n        for (uint256 i = 1; i <= _mintAmount; i++) {\\n            require(_tokenIdTracker.current() <= max, \\\"Transaction exceeds max mint amount\\\");\\n            _mint(_to, _tokenIdTracker.current());\\n            _tokenIdTracker.increment();\\n        }\\n    }\\n\\n    function claim(bytes memory sig) external {\\n        require(wlMintStarted == true, \\\"WL Mint not started yet\\\");\\n        require(checkSignature(sig, _msgSender()) == true, \\\"Signature not valid\\\");\\n        require(blacklist[_msgSender()] == false, \\\"This address was already used\\\");\\n        require(_tokenIdTracker.current() <= max, \\\"Transaction exceeds max mint amount\\\");\\n        _mint(_msgSender(), _tokenIdTracker.current());\\n        _tokenIdTracker.increment();\\n        blacklist[_msgSender()] = true;\\n    }\\n\\n    function whitelistMint(uint256 _mintAmount, bytes memory sig) external payable {\\n        require(publicSaleStarted == true, \\\"Public Sale not started yet\\\");\\n        require(wlMintStarted == true, \\\"WL Mint not started yet\\\");\\n        require(_mintAmount <= maxMintPerTx, \\\"Exceeds max amount per transaction allowed\\\");\\n        require(checkSignature(sig, _msgSender()) == true, \\\"Signature is not valid\\\");\\n        require(blacklist[_msgSender()] == false, \\\"This whitelisted address was already used\\\");\\n        require(msg.value >= cost * (_mintAmount - 1), \\\"Not enough ether provided\\\");\\n        for (uint256 i = 1; i <= _mintAmount; i++) {\\n            require(_tokenIdTracker.current() <= max, \\\"Transaction exceeds max mint amount\\\");\\n            _mint(_msgSender(), _tokenIdTracker.current());\\n            _tokenIdTracker.increment();\\n        }\\n        blacklist[_msgSender()] = true;\\n    }\\n\\n    function mint(uint256 _mintAmount) external payable {\\n        require(publicSaleStarted == true, \\\"Public Sale not started yet\\\");\\n        require(_mintAmount <= maxMintPerTx, \\\"Exceeds max amount per transaction allowed\\\");\\n        require(msg.value >= cost * _mintAmount, \\\"Not enough ether provided\\\");\\n        for (uint256 i = 1; i <= _mintAmount; i++) {\\n            require(_tokenIdTracker.current() <= max, \\\"Transaction exceeds max mint amount\\\");\\n            _mint(_msgSender(), _tokenIdTracker.current());\\n            _tokenIdTracker.increment();\\n        }\\n    }\\n\\n    function withdraw(address token, uint256 amount) external onlyOwner {\\n        if (token == address(0)) {\\n            payable(_msgSender()).transfer(amount);\\n        } else {\\n            IERC20(token).transfer(_msgSender(), amount);\\n        }\\n    }\\n\\n    function setBaseTokenURI(string memory uri) external onlyOwner {\\n        require(tokenURIFrozen == false, \\\"Token URIs are frozen\\\");\\n        _baseTokenURI = uri;\\n    }\\n\\n    function setWLSigner(address signer) external onlyOwner {\\n        require(signer != 0x0000000000000000000000000000000000000000, \\\"Can't set WL signer as 0x00 address\\\");\\n        wlSigner = signer;\\n    }\\n\\n    function setCost(uint256 price) external onlyOwner {\\n        cost = price;\\n    }\\n\\n    function freezeBaseURI() external onlyOwner {\\n        tokenURIFrozen = true;\\n    }\\n\\n    function startPublicSale() external onlyOwner {\\n        publicSaleStarted = true;\\n    }\\n\\n    function startWLMint() external onlyOwner {\\n        wlMintStarted = true;\\n    }\\n\\n    function walletOfOwner(address _owner) public view returns (uint256[] memory) {\\n        uint256 ownerTokenCount = balanceOf(_owner);\\n        uint256[] memory tokenIds = new uint256[](ownerTokenCount);\\n        for (uint256 i; i < ownerTokenCount; i++) {\\n            tokenIds[i] = tokenOfOwnerByIndex(_owner, i);\\n        }\\n        return tokenIds;\\n    }\\n\\n    function isBlacklisted(address _address) external view returns (bool) {\\n        return blacklist[_address];\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override(ERC721Enumerable) {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721Enumerable) returns (bool) {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n    function checkSignature(bytes memory sig, address sender) private view returns (bool) {\\n        bytes32 hash = keccak256(abi.encodePacked(address(this), sender));\\n        address signer = recover(hash, sig);\\n        return (wlSigner == signer);\\n    }\\n\\n    function recover(bytes32 hash, bytes memory sig) private pure returns (address) {\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        //Check the signature length\\n        if (sig.length != 65) {\\n            return (address(0));\\n        }\\n\\n        // Divide the signature in r, s and v variables\\n        assembly {\\n            r := mload(add(sig, 32))\\n            s := mload(add(sig, 64))\\n            v := byte(0, mload(add(sig, 96)))\\n        }\\n\\n        // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\\n        if (v < 27) {\\n            v += 27;\\n        }\\n\\n        bytes memory prefix = \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\";\\n        bytes32 prefixedHash = keccak256(abi.encodePacked(prefix, hash));\\n\\n        // If the version is correct return the signer address\\n        if (v != 27 && v != 28) {\\n            return (address(0));\\n        } else {\\n            return ecrecover(prefixedHash, v, r, s);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9a6b64853c3e16ded6a6a146338d0b7b74020a3f1fa32e551b7d83755025a377\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052612710600d556014600e55600f805462ffffff19169055666a94d74f4300006010553480156200003357600080fd5b5060405162003241380380620032418339810160408190526200005691620002a5565b82826200006333620000d9565b81516200007890600190602085019062000132565b5080516200008e90600290602084019062000132565b50508151620000a69150600c90602084019062000132565b50620000be600b6200012960201b620019591760201c565b5050601180546001600160a01b031916301790555062000373565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80546001019055565b828054620001409062000336565b90600052602060002090601f016020900481019282620001645760008555620001af565b82601f106200017f57805160ff1916838001178555620001af565b82800160010185558215620001af579182015b82811115620001af57825182559160200191906001019062000192565b50620001bd929150620001c1565b5090565b5b80821115620001bd5760008155600101620001c2565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200020057600080fd5b81516001600160401b03808211156200021d576200021d620001d8565b604051601f8301601f19908116603f01168101908282118183101715620002485762000248620001d8565b816040528381526020925086838588010111156200026557600080fd5b600091505b838210156200028957858201830151818301840152908201906200026a565b838211156200029b5760008385830101525b9695505050505050565b600080600060608486031215620002bb57600080fd5b83516001600160401b0380821115620002d357600080fd5b620002e187838801620001ee565b94506020860151915080821115620002f857600080fd5b6200030687838801620001ee565b935060408601519150808211156200031d57600080fd5b506200032c86828701620001ee565b9150509250925092565b600181811c908216806200034b57607f821691505b602082108114156200036d57634e487b7160e01b600052602260045260246000fd5b50919050565b612ebe80620003836000396000f3fe6080604052600436106102bb5760003560e01c80637e5f3e141161016e578063c63ff8dd116100cb578063e7bc82081161007f578063f2fde38b11610064578063f2fde38b14610747578063f3fef3a314610767578063fe575a871461078757600080fd5b8063e7bc8208146106e9578063e985e9c5146106fe57600080fd5b8063cfc86f7b116100b0578063cfc86f7b1461069e578063dce042fd146106b3578063de7fcb1d146106d357600080fd5b8063c63ff8dd1461065e578063c87b56dd1461067e57600080fd5b8063a0712d6811610122578063a2e9147711610107578063a2e9147714610604578063b88d4fde1461061e578063c29de6301461063e57600080fd5b8063a0712d68146105d1578063a22cb465146105e457600080fd5b8063927a5d2111610153578063927a5d211461058a57806395d89b41146105a95780639e852f75146105be57600080fd5b80637e5f3e14146105575780638da5cb5b1461056c57600080fd5b80632f745c591161021c5780634f6ccce7116101d05780636ac5db19116101b55780636ac5db191461050c57806370a0823114610522578063715018a61461054257600080fd5b80634f6ccce7146104cc5780636352211e146104ec57600080fd5b806342842e0e1161020157806342842e0e1461045f578063438b63001461047f57806344a0d68a146104ac57600080fd5b80632f745c591461041f57806330176e131461043f57600080fd5b80630c1c972a1161027357806313faede61161025857806313faede6146103c657806318160ddd146103ea57806323b872dd146103ff57600080fd5b80630c1c972a146103915780630dc28efe146103a657600080fd5b806306fdde03116102a457806306fdde0314610317578063081812fc14610339578063095ea7b31461037157600080fd5b806301ffc9a7146102c05780630399e3bc146102f5575b600080fd5b3480156102cc57600080fd5b506102e06102db366004612882565b6107c0565b60405190151581526020015b60405180910390f35b34801561030157600080fd5b506103156103103660046128bb565b6107d1565b005b34801561032357600080fd5b5061032c610889565b6040516102ec919061292e565b34801561034557600080fd5b50610359610354366004612941565b61091b565b6040516001600160a01b0390911681526020016102ec565b34801561037d57600080fd5b5061031561038c36600461295a565b610942565b34801561039d57600080fd5b50610315610a74565b3480156103b257600080fd5b506103156103c1366004612984565b610a8b565b3480156103d257600080fd5b506103dc60105481565b6040519081526020016102ec565b3480156103f657600080fd5b506009546103dc565b34801561040b57600080fd5b5061031561041a3660046129b0565b610b2f565b34801561042b57600080fd5b506103dc61043a36600461295a565b610bb6565b34801561044b57600080fd5b5061031561045a366004612a78565b610c5e565b34801561046b57600080fd5b5061031561047a3660046129b0565b610cd6565b34801561048b57600080fd5b5061049f61049a3660046128bb565b610cf1565b6040516102ec9190612ac1565b3480156104b857600080fd5b506103156104c7366004612941565b610d93565b3480156104d857600080fd5b506103dc6104e7366004612941565b610da0565b3480156104f857600080fd5b50610359610507366004612941565b610e44565b34801561051857600080fd5b506103dc600d5481565b34801561052e57600080fd5b506103dc61053d3660046128bb565b610ea9565b34801561054e57600080fd5b50610315610f43565b34801561056357600080fd5b50610315610f57565b34801561057857600080fd5b506000546001600160a01b0316610359565b34801561059657600080fd5b50600f546102e090610100900460ff1681565b3480156105b557600080fd5b5061032c610f8d565b6103156105cc366004612b25565b610f9c565b6103156105df366004612941565b6112c6565b3480156105f057600080fd5b506103156105ff366004612b7a565b611485565b34801561061057600080fd5b50600f546102e09060ff1681565b34801561062a57600080fd5b50610315610639366004612bb1565b611490565b34801561064a57600080fd5b50600f546102e09062010000900460ff1681565b34801561066a57600080fd5b50610315610679366004612c19565b61151e565b34801561068a57600080fd5b5061032c610699366004612941565b6116ca565b3480156106aa57600080fd5b5061032c611731565b3480156106bf57600080fd5b50601154610359906001600160a01b031681565b3480156106df57600080fd5b506103dc600e5481565b3480156106f557600080fd5b506103156117bf565b34801561070a57600080fd5b506102e0610719366004612c4e565b6001600160a01b03918216600090815260066020908152604080832093909416825291909152205460ff1690565b34801561075357600080fd5b506103156107623660046128bb565b6117f6565b34801561077357600080fd5b5061031561078236600461295a565b611886565b34801561079357600080fd5b506102e06107a23660046128bb565b6001600160a01b031660009081526012602052604090205460ff1690565b60006107cb82611962565b92915050565b6107d96119a0565b6001600160a01b03811661085a5760405162461bcd60e51b815260206004820152602360248201527f43616e27742073657420574c207369676e65722061732030783030206164647260448201527f657373000000000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6011805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b60606001805461089890612c78565b80601f01602080910402602001604051908101604052809291908181526020018280546108c490612c78565b80156109115780601f106108e657610100808354040283529160200191610911565b820191906000526020600020905b8154815290600101906020018083116108f457829003601f168201915b5050505050905090565b6000610926826119fa565b506000908152600560205260409020546001600160a01b031690565b600061094d82610e44565b9050806001600160a01b0316836001600160a01b031614156109d75760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560448201527f72000000000000000000000000000000000000000000000000000000000000006064820152608401610851565b336001600160a01b03821614806109f357506109f38133610719565b610a655760405162461bcd60e51b815260206004820152603e60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c00006064820152608401610851565b610a6f8383611a5e565b505050565b610a7c6119a0565b600f805460ff19166001179055565b610a936119a0565b60015b828111610a6f57600d54600b541115610afd5760405162461bcd60e51b815260206004820152602360248201527f5472616e73616374696f6e2065786365656473206d6178206d696e7420616d6f6044820152621d5b9d60ea1b6064820152608401610851565b610b0f82610b0a600b5490565b611ad9565b610b1d600b80546001019055565b80610b2781612cc9565b915050610a96565b610b393382611c34565b610bab5760405162461bcd60e51b815260206004820152602e60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201527f72206e6f7220617070726f7665640000000000000000000000000000000000006064820152608401610851565b610a6f838383611cb3565b6000610bc183610ea9565b8210610c355760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201527f74206f6620626f756e64730000000000000000000000000000000000000000006064820152608401610851565b506001600160a01b03919091166000908152600760209081526040808320938352929052205490565b610c666119a0565b600f5462010000900460ff1615610cbf5760405162461bcd60e51b815260206004820152601560248201527f546f6b656e2055524973206172652066726f7a656e00000000000000000000006044820152606401610851565b8051610cd290600c9060208401906127d3565b5050565b610a6f83838360405180602001604052806000815250611490565b60606000610cfe83610ea9565b905060008167ffffffffffffffff811115610d1b57610d1b6129ec565b604051908082528060200260200182016040528015610d44578160200160208202803683370190505b50905060005b82811015610d8b57610d5c8582610bb6565b828281518110610d6e57610d6e612ce4565b602090810291909101015280610d8381612cc9565b915050610d4a565b509392505050565b610d9b6119a0565b601055565b6000610dab60095490565b8210610e1f5760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201527f7574206f6620626f756e647300000000000000000000000000000000000000006064820152608401610851565b60098281548110610e3257610e32612ce4565b90600052602060002001549050919050565b6000818152600360205260408120546001600160a01b0316806107cb5760405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e20494400000000000000006044820152606401610851565b60006001600160a01b038216610f275760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f74206120766160448201527f6c6964206f776e657200000000000000000000000000000000000000000000006064820152608401610851565b506001600160a01b031660009081526004602052604090205490565b610f4b6119a0565b610f556000611e98565b565b610f5f6119a0565b600f80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff16610100179055565b60606002805461089890612c78565b600f5460ff161515600114610ff35760405162461bcd60e51b815260206004820152601b60248201527f5075626c69632053616c65206e6f7420737461727465642079657400000000006044820152606401610851565b600f5460ff6101009091041615156001146110505760405162461bcd60e51b815260206004820152601760248201527f574c204d696e74206e6f742073746172746564207965740000000000000000006044820152606401610851565b600e548211156110c85760405162461bcd60e51b815260206004820152602a60248201527f45786365656473206d617820616d6f756e7420706572207472616e736163746960448201527f6f6e20616c6c6f776564000000000000000000000000000000000000000000006064820152608401610851565b6110d28133611ef5565b15156001146111235760405162461bcd60e51b815260206004820152601660248201527f5369676e6174757265206973206e6f742076616c6964000000000000000000006044820152606401610851565b3360009081526012602052604090205460ff16156111a95760405162461bcd60e51b815260206004820152602960248201527f546869732077686974656c697374656420616464726573732077617320616c7260448201527f65616479207573656400000000000000000000000000000000000000000000006064820152608401610851565b6111b4600183612cfa565b6010546111c19190612d11565b3410156112105760405162461bcd60e51b815260206004820152601960248201527f4e6f7420656e6f7567682065746865722070726f7669646564000000000000006044820152606401610851565b60015b8281116112a757600d54600b54111561127a5760405162461bcd60e51b815260206004820152602360248201527f5472616e73616374696f6e2065786365656473206d6178206d696e7420616d6f6044820152621d5b9d60ea1b6064820152608401610851565b611287335b600b54611ad9565b611295600b80546001019055565b8061129f81612cc9565b915050611213565b5050336000908152601260205260409020805460ff1916600117905550565b600f5460ff16151560011461131d5760405162461bcd60e51b815260206004820152601b60248201527f5075626c69632053616c65206e6f7420737461727465642079657400000000006044820152606401610851565b600e548111156113955760405162461bcd60e51b815260206004820152602a60248201527f45786365656473206d617820616d6f756e7420706572207472616e736163746960448201527f6f6e20616c6c6f776564000000000000000000000000000000000000000000006064820152608401610851565b806010546113a39190612d11565b3410156113f25760405162461bcd60e51b815260206004820152601960248201527f4e6f7420656e6f7567682065746865722070726f7669646564000000000000006044820152606401610851565b60015b818111610cd257600d54600b54111561145c5760405162461bcd60e51b815260206004820152602360248201527f5472616e73616374696f6e2065786365656473206d6178206d696e7420616d6f6044820152621d5b9d60ea1b6064820152608401610851565b6114653361127f565b611473600b80546001019055565b8061147d81612cc9565b9150506113f5565b610cd2338383611f75565b61149a3383611c34565b61150c5760405162461bcd60e51b815260206004820152602e60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201527f72206e6f7220617070726f7665640000000000000000000000000000000000006064820152608401610851565b61151884848484612044565b50505050565b600f5460ff61010090910416151560011461157b5760405162461bcd60e51b815260206004820152601760248201527f574c204d696e74206e6f742073746172746564207965740000000000000000006044820152606401610851565b6115858133611ef5565b15156001146115d65760405162461bcd60e51b815260206004820152601360248201527f5369676e6174757265206e6f742076616c6964000000000000000000000000006044820152606401610851565b3360009081526012602052604090205460ff16156116365760405162461bcd60e51b815260206004820152601d60248201527f5468697320616464726573732077617320616c726561647920757365640000006044820152606401610851565b600d54600b5411156116965760405162461bcd60e51b815260206004820152602360248201527f5472616e73616374696f6e2065786365656473206d6178206d696e7420616d6f6044820152621d5b9d60ea1b6064820152608401610851565b61169f3361127f565b6116ad600b80546001019055565b50336000908152601260205260409020805460ff19166001179055565b60606116d5826119fa565b60006116df6120cd565b905060008151116116ff576040518060200160405280600081525061172a565b80611709846120dc565b60405160200161171a929190612d30565b6040516020818303038152906040525b9392505050565b600c805461173e90612c78565b80601f016020809104026020016040519081016040528092919081815260200182805461176a90612c78565b80156117b75780601f1061178c576101008083540402835291602001916117b7565b820191906000526020600020905b81548152906001019060200180831161179a57829003601f168201915b505050505081565b6117c76119a0565b600f80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffff1662010000179055565b6117fe6119a0565b6001600160a01b03811661187a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610851565b61188381611e98565b50565b61188e6119a0565b6001600160a01b0382166118c957604051339082156108fc029083906000818181858888f19350505050158015610a6f573d6000803e3d6000fd5b6001600160a01b03821663a9059cbb336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260248101849052604401602060405180830381600087803b15801561192157600080fd5b505af1158015611935573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a6f9190612d5f565b80546001019055565b60006001600160e01b031982167f780e9d630000000000000000000000000000000000000000000000000000000014806107cb57506107cb8261220e565b6000546001600160a01b03163314610f555760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610851565b6000818152600360205260409020546001600160a01b03166118835760405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e20494400000000000000006044820152606401610851565b6000818152600560205260409020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0384169081179091558190611aa082610e44565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6001600160a01b038216611b2f5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610851565b6000818152600360205260409020546001600160a01b031615611b945760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610851565b611ba0600083836122a9565b6001600160a01b0382166000908152600460205260408120805460019290611bc9908490612d7c565b9091555050600081815260036020526040808220805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b600080611c4083610e44565b9050806001600160a01b0316846001600160a01b03161480611c8757506001600160a01b0380821660009081526006602090815260408083209388168352929052205460ff165b80611cab5750836001600160a01b0316611ca08461091b565b6001600160a01b0316145b949350505050565b826001600160a01b0316611cc682610e44565b6001600160a01b031614611d425760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201527f6f776e65720000000000000000000000000000000000000000000000000000006064820152608401610851565b6001600160a01b038216611dbd5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401610851565b611dc88383836122a9565b611dd3600082611a5e565b6001600160a01b0383166000908152600460205260408120805460019290611dfc908490612cfa565b90915550506001600160a01b0382166000908152600460205260408120805460019290611e2a908490612d7c565b9091555050600081815260036020526040808220805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6040517fffffffffffffffffffffffffffffffffffffffff00000000000000000000000030606090811b8216602084015283901b16603482015260009081906048016040516020818303038152906040528051906020012090506000611f5b82866122b4565b6011546001600160a01b0391821691161495945050505050565b816001600160a01b0316836001600160a01b03161415611fd75760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610851565b6001600160a01b03838116600081815260066020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b61204f848484611cb3565b61205b848484846123f6565b6115185760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610851565b6060600c805461089890612c78565b60608161211c57505060408051808201909152600181527f3000000000000000000000000000000000000000000000000000000000000000602082015290565b8160005b8115612146578061213081612cc9565b915061213f9050600a83612daa565b9150612120565b60008167ffffffffffffffff811115612161576121616129ec565b6040519080825280601f01601f19166020018201604052801561218b576020820181803683370190505b5090505b8415611cab576121a0600183612cfa565b91506121ad600a86612dbe565b6121b8906030612d7c565b60f81b8183815181106121cd576121cd612ce4565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350612207600a86612daa565b945061218f565b60006001600160e01b031982167f80ac58cd00000000000000000000000000000000000000000000000000000000148061227157506001600160e01b031982167f5b5e139f00000000000000000000000000000000000000000000000000000000145b806107cb57507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316146107cb565b610a6f83838361258b565b60008060008084516041146122cf57600093505050506107cb565b50505060208201516040830151606084015160001a601b8110156122fb576122f8601b82612dd2565b90505b60006040518060400160405280601c81526020017f19457468657265756d205369676e6564204d6573736167653a0a33320000000081525090506000818860405160200161234a929190612df7565b6040516020818303038152906040528051906020012090508260ff16601b1415801561237a57508260ff16601c14155b1561238d576000955050505050506107cb565b60408051600081526020810180835283905260ff851691810191909152606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156123e0573d6000803e3d6000fd5b50505060206040510351955050505050506107cb565b60006001600160a01b0384163b15612580576040517f150b7a020000000000000000000000000000000000000000000000000000000081526001600160a01b0385169063150b7a0290612453903390899088908890600401612e19565b602060405180830381600087803b15801561246d57600080fd5b505af192505050801561249d575060408051601f3d908101601f1916820190925261249a91810190612e55565b60015b61254d573d8080156124cb576040519150601f19603f3d011682016040523d82523d6000602084013e6124d0565b606091505b5080516125455760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610851565b805181602001fd5b6001600160e01b0319167f150b7a0200000000000000000000000000000000000000000000000000000000149050611cab565b506001949350505050565b6001600160a01b0383166125e6576125e181600980546000838152600a60205260408120829055600182018355919091527f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af0155565b612609565b816001600160a01b0316836001600160a01b031614612609576126098382612643565b6001600160a01b03821661262057610a6f816126e0565b826001600160a01b0316826001600160a01b031614610a6f57610a6f828261278f565b6000600161265084610ea9565b61265a9190612cfa565b6000838152600860205260409020549091508082146126ad576001600160a01b03841660009081526007602090815260408083208584528252808320548484528184208190558352600890915290208190555b5060009182526008602090815260408084208490556001600160a01b039094168352600781528383209183525290812055565b6009546000906126f290600190612cfa565b6000838152600a60205260408120546009805493945090928490811061271a5761271a612ce4565b90600052602060002001549050806009838154811061273b5761273b612ce4565b6000918252602080832090910192909255828152600a9091526040808220849055858252812055600980548061277357612773612e72565b6001900381819060005260206000200160009055905550505050565b600061279a83610ea9565b6001600160a01b039093166000908152600760209081526040808320868452825280832085905593825260089052919091209190915550565b8280546127df90612c78565b90600052602060002090601f0160209004810192826128015760008555612847565b82601f1061281a57805160ff1916838001178555612847565b82800160010185558215612847579182015b8281111561284757825182559160200191906001019061282c565b50612853929150612857565b5090565b5b808211156128535760008155600101612858565b6001600160e01b03198116811461188357600080fd5b60006020828403121561289457600080fd5b813561172a8161286c565b80356001600160a01b03811681146128b657600080fd5b919050565b6000602082840312156128cd57600080fd5b61172a8261289f565b60005b838110156128f15781810151838201526020016128d9565b838111156115185750506000910152565b6000815180845261291a8160208601602086016128d6565b601f01601f19169290920160200192915050565b60208152600061172a6020830184612902565b60006020828403121561295357600080fd5b5035919050565b6000806040838503121561296d57600080fd5b6129768361289f565b946020939093013593505050565b6000806040838503121561299757600080fd5b823591506129a76020840161289f565b90509250929050565b6000806000606084860312156129c557600080fd5b6129ce8461289f565b92506129dc6020850161289f565b9150604084013590509250925092565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff80841115612a1d57612a1d6129ec565b604051601f8501601f19908116603f01168101908282118183101715612a4557612a456129ec565b81604052809350858152868686011115612a5e57600080fd5b858560208301376000602087830101525050509392505050565b600060208284031215612a8a57600080fd5b813567ffffffffffffffff811115612aa157600080fd5b8201601f81018413612ab257600080fd5b611cab84823560208401612a02565b6020808252825182820181905260009190848201906040850190845b81811015612af957835183529284019291840191600101612add565b50909695505050505050565b600082601f830112612b1657600080fd5b61172a83833560208501612a02565b60008060408385031215612b3857600080fd5b82359150602083013567ffffffffffffffff811115612b5657600080fd5b612b6285828601612b05565b9150509250929050565b801515811461188357600080fd5b60008060408385031215612b8d57600080fd5b612b968361289f565b91506020830135612ba681612b6c565b809150509250929050565b60008060008060808587031215612bc757600080fd5b612bd08561289f565b9350612bde6020860161289f565b925060408501359150606085013567ffffffffffffffff811115612c0157600080fd5b612c0d87828801612b05565b91505092959194509250565b600060208284031215612c2b57600080fd5b813567ffffffffffffffff811115612c4257600080fd5b611cab84828501612b05565b60008060408385031215612c6157600080fd5b612c6a8361289f565b91506129a76020840161289f565b600181811c90821680612c8c57607f821691505b60208210811415612cad57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b6000600019821415612cdd57612cdd612cb3565b5060010190565b634e487b7160e01b600052603260045260246000fd5b600082821015612d0c57612d0c612cb3565b500390565b6000816000190483118215151615612d2b57612d2b612cb3565b500290565b60008351612d428184602088016128d6565b835190830190612d568183602088016128d6565b01949350505050565b600060208284031215612d7157600080fd5b815161172a81612b6c565b60008219821115612d8f57612d8f612cb3565b500190565b634e487b7160e01b600052601260045260246000fd5b600082612db957612db9612d94565b500490565b600082612dcd57612dcd612d94565b500690565b600060ff821660ff84168060ff03821115612def57612def612cb3565b019392505050565b60008351612e098184602088016128d6565b9190910191825250602001919050565b60006001600160a01b03808716835280861660208401525083604083015260806060830152612e4b6080830184612902565b9695505050505050565b600060208284031215612e6757600080fd5b815161172a8161286c565b634e487b7160e01b600052603160045260246000fdfea2646970667358221220f2a8da8695bbb373ef1b68106a63887e7db68973591bdd3d0c14512c48b230fa64736f6c63430008090033",
  "deployedBytecode": "0x6080604052600436106102bb5760003560e01c80637e5f3e141161016e578063c63ff8dd116100cb578063e7bc82081161007f578063f2fde38b11610064578063f2fde38b14610747578063f3fef3a314610767578063fe575a871461078757600080fd5b8063e7bc8208146106e9578063e985e9c5146106fe57600080fd5b8063cfc86f7b116100b0578063cfc86f7b1461069e578063dce042fd146106b3578063de7fcb1d146106d357600080fd5b8063c63ff8dd1461065e578063c87b56dd1461067e57600080fd5b8063a0712d6811610122578063a2e9147711610107578063a2e9147714610604578063b88d4fde1461061e578063c29de6301461063e57600080fd5b8063a0712d68146105d1578063a22cb465146105e457600080fd5b8063927a5d2111610153578063927a5d211461058a57806395d89b41146105a95780639e852f75146105be57600080fd5b80637e5f3e14146105575780638da5cb5b1461056c57600080fd5b80632f745c591161021c5780634f6ccce7116101d05780636ac5db19116101b55780636ac5db191461050c57806370a0823114610522578063715018a61461054257600080fd5b80634f6ccce7146104cc5780636352211e146104ec57600080fd5b806342842e0e1161020157806342842e0e1461045f578063438b63001461047f57806344a0d68a146104ac57600080fd5b80632f745c591461041f57806330176e131461043f57600080fd5b80630c1c972a1161027357806313faede61161025857806313faede6146103c657806318160ddd146103ea57806323b872dd146103ff57600080fd5b80630c1c972a146103915780630dc28efe146103a657600080fd5b806306fdde03116102a457806306fdde0314610317578063081812fc14610339578063095ea7b31461037157600080fd5b806301ffc9a7146102c05780630399e3bc146102f5575b600080fd5b3480156102cc57600080fd5b506102e06102db366004612882565b6107c0565b60405190151581526020015b60405180910390f35b34801561030157600080fd5b506103156103103660046128bb565b6107d1565b005b34801561032357600080fd5b5061032c610889565b6040516102ec919061292e565b34801561034557600080fd5b50610359610354366004612941565b61091b565b6040516001600160a01b0390911681526020016102ec565b34801561037d57600080fd5b5061031561038c36600461295a565b610942565b34801561039d57600080fd5b50610315610a74565b3480156103b257600080fd5b506103156103c1366004612984565b610a8b565b3480156103d257600080fd5b506103dc60105481565b6040519081526020016102ec565b3480156103f657600080fd5b506009546103dc565b34801561040b57600080fd5b5061031561041a3660046129b0565b610b2f565b34801561042b57600080fd5b506103dc61043a36600461295a565b610bb6565b34801561044b57600080fd5b5061031561045a366004612a78565b610c5e565b34801561046b57600080fd5b5061031561047a3660046129b0565b610cd6565b34801561048b57600080fd5b5061049f61049a3660046128bb565b610cf1565b6040516102ec9190612ac1565b3480156104b857600080fd5b506103156104c7366004612941565b610d93565b3480156104d857600080fd5b506103dc6104e7366004612941565b610da0565b3480156104f857600080fd5b50610359610507366004612941565b610e44565b34801561051857600080fd5b506103dc600d5481565b34801561052e57600080fd5b506103dc61053d3660046128bb565b610ea9565b34801561054e57600080fd5b50610315610f43565b34801561056357600080fd5b50610315610f57565b34801561057857600080fd5b506000546001600160a01b0316610359565b34801561059657600080fd5b50600f546102e090610100900460ff1681565b3480156105b557600080fd5b5061032c610f8d565b6103156105cc366004612b25565b610f9c565b6103156105df366004612941565b6112c6565b3480156105f057600080fd5b506103156105ff366004612b7a565b611485565b34801561061057600080fd5b50600f546102e09060ff1681565b34801561062a57600080fd5b50610315610639366004612bb1565b611490565b34801561064a57600080fd5b50600f546102e09062010000900460ff1681565b34801561066a57600080fd5b50610315610679366004612c19565b61151e565b34801561068a57600080fd5b5061032c610699366004612941565b6116ca565b3480156106aa57600080fd5b5061032c611731565b3480156106bf57600080fd5b50601154610359906001600160a01b031681565b3480156106df57600080fd5b506103dc600e5481565b3480156106f557600080fd5b506103156117bf565b34801561070a57600080fd5b506102e0610719366004612c4e565b6001600160a01b03918216600090815260066020908152604080832093909416825291909152205460ff1690565b34801561075357600080fd5b506103156107623660046128bb565b6117f6565b34801561077357600080fd5b5061031561078236600461295a565b611886565b34801561079357600080fd5b506102e06107a23660046128bb565b6001600160a01b031660009081526012602052604090205460ff1690565b60006107cb82611962565b92915050565b6107d96119a0565b6001600160a01b03811661085a5760405162461bcd60e51b815260206004820152602360248201527f43616e27742073657420574c207369676e65722061732030783030206164647260448201527f657373000000000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6011805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b60606001805461089890612c78565b80601f01602080910402602001604051908101604052809291908181526020018280546108c490612c78565b80156109115780601f106108e657610100808354040283529160200191610911565b820191906000526020600020905b8154815290600101906020018083116108f457829003601f168201915b5050505050905090565b6000610926826119fa565b506000908152600560205260409020546001600160a01b031690565b600061094d82610e44565b9050806001600160a01b0316836001600160a01b031614156109d75760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560448201527f72000000000000000000000000000000000000000000000000000000000000006064820152608401610851565b336001600160a01b03821614806109f357506109f38133610719565b610a655760405162461bcd60e51b815260206004820152603e60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c00006064820152608401610851565b610a6f8383611a5e565b505050565b610a7c6119a0565b600f805460ff19166001179055565b610a936119a0565b60015b828111610a6f57600d54600b541115610afd5760405162461bcd60e51b815260206004820152602360248201527f5472616e73616374696f6e2065786365656473206d6178206d696e7420616d6f6044820152621d5b9d60ea1b6064820152608401610851565b610b0f82610b0a600b5490565b611ad9565b610b1d600b80546001019055565b80610b2781612cc9565b915050610a96565b610b393382611c34565b610bab5760405162461bcd60e51b815260206004820152602e60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201527f72206e6f7220617070726f7665640000000000000000000000000000000000006064820152608401610851565b610a6f838383611cb3565b6000610bc183610ea9565b8210610c355760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201527f74206f6620626f756e64730000000000000000000000000000000000000000006064820152608401610851565b506001600160a01b03919091166000908152600760209081526040808320938352929052205490565b610c666119a0565b600f5462010000900460ff1615610cbf5760405162461bcd60e51b815260206004820152601560248201527f546f6b656e2055524973206172652066726f7a656e00000000000000000000006044820152606401610851565b8051610cd290600c9060208401906127d3565b5050565b610a6f83838360405180602001604052806000815250611490565b60606000610cfe83610ea9565b905060008167ffffffffffffffff811115610d1b57610d1b6129ec565b604051908082528060200260200182016040528015610d44578160200160208202803683370190505b50905060005b82811015610d8b57610d5c8582610bb6565b828281518110610d6e57610d6e612ce4565b602090810291909101015280610d8381612cc9565b915050610d4a565b509392505050565b610d9b6119a0565b601055565b6000610dab60095490565b8210610e1f5760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201527f7574206f6620626f756e647300000000000000000000000000000000000000006064820152608401610851565b60098281548110610e3257610e32612ce4565b90600052602060002001549050919050565b6000818152600360205260408120546001600160a01b0316806107cb5760405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e20494400000000000000006044820152606401610851565b60006001600160a01b038216610f275760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f74206120766160448201527f6c6964206f776e657200000000000000000000000000000000000000000000006064820152608401610851565b506001600160a01b031660009081526004602052604090205490565b610f4b6119a0565b610f556000611e98565b565b610f5f6119a0565b600f80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff16610100179055565b60606002805461089890612c78565b600f5460ff161515600114610ff35760405162461bcd60e51b815260206004820152601b60248201527f5075626c69632053616c65206e6f7420737461727465642079657400000000006044820152606401610851565b600f5460ff6101009091041615156001146110505760405162461bcd60e51b815260206004820152601760248201527f574c204d696e74206e6f742073746172746564207965740000000000000000006044820152606401610851565b600e548211156110c85760405162461bcd60e51b815260206004820152602a60248201527f45786365656473206d617820616d6f756e7420706572207472616e736163746960448201527f6f6e20616c6c6f776564000000000000000000000000000000000000000000006064820152608401610851565b6110d28133611ef5565b15156001146111235760405162461bcd60e51b815260206004820152601660248201527f5369676e6174757265206973206e6f742076616c6964000000000000000000006044820152606401610851565b3360009081526012602052604090205460ff16156111a95760405162461bcd60e51b815260206004820152602960248201527f546869732077686974656c697374656420616464726573732077617320616c7260448201527f65616479207573656400000000000000000000000000000000000000000000006064820152608401610851565b6111b4600183612cfa565b6010546111c19190612d11565b3410156112105760405162461bcd60e51b815260206004820152601960248201527f4e6f7420656e6f7567682065746865722070726f7669646564000000000000006044820152606401610851565b60015b8281116112a757600d54600b54111561127a5760405162461bcd60e51b815260206004820152602360248201527f5472616e73616374696f6e2065786365656473206d6178206d696e7420616d6f6044820152621d5b9d60ea1b6064820152608401610851565b611287335b600b54611ad9565b611295600b80546001019055565b8061129f81612cc9565b915050611213565b5050336000908152601260205260409020805460ff1916600117905550565b600f5460ff16151560011461131d5760405162461bcd60e51b815260206004820152601b60248201527f5075626c69632053616c65206e6f7420737461727465642079657400000000006044820152606401610851565b600e548111156113955760405162461bcd60e51b815260206004820152602a60248201527f45786365656473206d617820616d6f756e7420706572207472616e736163746960448201527f6f6e20616c6c6f776564000000000000000000000000000000000000000000006064820152608401610851565b806010546113a39190612d11565b3410156113f25760405162461bcd60e51b815260206004820152601960248201527f4e6f7420656e6f7567682065746865722070726f7669646564000000000000006044820152606401610851565b60015b818111610cd257600d54600b54111561145c5760405162461bcd60e51b815260206004820152602360248201527f5472616e73616374696f6e2065786365656473206d6178206d696e7420616d6f6044820152621d5b9d60ea1b6064820152608401610851565b6114653361127f565b611473600b80546001019055565b8061147d81612cc9565b9150506113f5565b610cd2338383611f75565b61149a3383611c34565b61150c5760405162461bcd60e51b815260206004820152602e60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201527f72206e6f7220617070726f7665640000000000000000000000000000000000006064820152608401610851565b61151884848484612044565b50505050565b600f5460ff61010090910416151560011461157b5760405162461bcd60e51b815260206004820152601760248201527f574c204d696e74206e6f742073746172746564207965740000000000000000006044820152606401610851565b6115858133611ef5565b15156001146115d65760405162461bcd60e51b815260206004820152601360248201527f5369676e6174757265206e6f742076616c6964000000000000000000000000006044820152606401610851565b3360009081526012602052604090205460ff16156116365760405162461bcd60e51b815260206004820152601d60248201527f5468697320616464726573732077617320616c726561647920757365640000006044820152606401610851565b600d54600b5411156116965760405162461bcd60e51b815260206004820152602360248201527f5472616e73616374696f6e2065786365656473206d6178206d696e7420616d6f6044820152621d5b9d60ea1b6064820152608401610851565b61169f3361127f565b6116ad600b80546001019055565b50336000908152601260205260409020805460ff19166001179055565b60606116d5826119fa565b60006116df6120cd565b905060008151116116ff576040518060200160405280600081525061172a565b80611709846120dc565b60405160200161171a929190612d30565b6040516020818303038152906040525b9392505050565b600c805461173e90612c78565b80601f016020809104026020016040519081016040528092919081815260200182805461176a90612c78565b80156117b75780601f1061178c576101008083540402835291602001916117b7565b820191906000526020600020905b81548152906001019060200180831161179a57829003601f168201915b505050505081565b6117c76119a0565b600f80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffff1662010000179055565b6117fe6119a0565b6001600160a01b03811661187a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610851565b61188381611e98565b50565b61188e6119a0565b6001600160a01b0382166118c957604051339082156108fc029083906000818181858888f19350505050158015610a6f573d6000803e3d6000fd5b6001600160a01b03821663a9059cbb336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260248101849052604401602060405180830381600087803b15801561192157600080fd5b505af1158015611935573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a6f9190612d5f565b80546001019055565b60006001600160e01b031982167f780e9d630000000000000000000000000000000000000000000000000000000014806107cb57506107cb8261220e565b6000546001600160a01b03163314610f555760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610851565b6000818152600360205260409020546001600160a01b03166118835760405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e20494400000000000000006044820152606401610851565b6000818152600560205260409020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0384169081179091558190611aa082610e44565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6001600160a01b038216611b2f5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610851565b6000818152600360205260409020546001600160a01b031615611b945760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610851565b611ba0600083836122a9565b6001600160a01b0382166000908152600460205260408120805460019290611bc9908490612d7c565b9091555050600081815260036020526040808220805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b600080611c4083610e44565b9050806001600160a01b0316846001600160a01b03161480611c8757506001600160a01b0380821660009081526006602090815260408083209388168352929052205460ff165b80611cab5750836001600160a01b0316611ca08461091b565b6001600160a01b0316145b949350505050565b826001600160a01b0316611cc682610e44565b6001600160a01b031614611d425760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201527f6f776e65720000000000000000000000000000000000000000000000000000006064820152608401610851565b6001600160a01b038216611dbd5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401610851565b611dc88383836122a9565b611dd3600082611a5e565b6001600160a01b0383166000908152600460205260408120805460019290611dfc908490612cfa565b90915550506001600160a01b0382166000908152600460205260408120805460019290611e2a908490612d7c565b9091555050600081815260036020526040808220805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6040517fffffffffffffffffffffffffffffffffffffffff00000000000000000000000030606090811b8216602084015283901b16603482015260009081906048016040516020818303038152906040528051906020012090506000611f5b82866122b4565b6011546001600160a01b0391821691161495945050505050565b816001600160a01b0316836001600160a01b03161415611fd75760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610851565b6001600160a01b03838116600081815260066020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b61204f848484611cb3565b61205b848484846123f6565b6115185760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610851565b6060600c805461089890612c78565b60608161211c57505060408051808201909152600181527f3000000000000000000000000000000000000000000000000000000000000000602082015290565b8160005b8115612146578061213081612cc9565b915061213f9050600a83612daa565b9150612120565b60008167ffffffffffffffff811115612161576121616129ec565b6040519080825280601f01601f19166020018201604052801561218b576020820181803683370190505b5090505b8415611cab576121a0600183612cfa565b91506121ad600a86612dbe565b6121b8906030612d7c565b60f81b8183815181106121cd576121cd612ce4565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350612207600a86612daa565b945061218f565b60006001600160e01b031982167f80ac58cd00000000000000000000000000000000000000000000000000000000148061227157506001600160e01b031982167f5b5e139f00000000000000000000000000000000000000000000000000000000145b806107cb57507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316146107cb565b610a6f83838361258b565b60008060008084516041146122cf57600093505050506107cb565b50505060208201516040830151606084015160001a601b8110156122fb576122f8601b82612dd2565b90505b60006040518060400160405280601c81526020017f19457468657265756d205369676e6564204d6573736167653a0a33320000000081525090506000818860405160200161234a929190612df7565b6040516020818303038152906040528051906020012090508260ff16601b1415801561237a57508260ff16601c14155b1561238d576000955050505050506107cb565b60408051600081526020810180835283905260ff851691810191909152606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156123e0573d6000803e3d6000fd5b50505060206040510351955050505050506107cb565b60006001600160a01b0384163b15612580576040517f150b7a020000000000000000000000000000000000000000000000000000000081526001600160a01b0385169063150b7a0290612453903390899088908890600401612e19565b602060405180830381600087803b15801561246d57600080fd5b505af192505050801561249d575060408051601f3d908101601f1916820190925261249a91810190612e55565b60015b61254d573d8080156124cb576040519150601f19603f3d011682016040523d82523d6000602084013e6124d0565b606091505b5080516125455760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610851565b805181602001fd5b6001600160e01b0319167f150b7a0200000000000000000000000000000000000000000000000000000000149050611cab565b506001949350505050565b6001600160a01b0383166125e6576125e181600980546000838152600a60205260408120829055600182018355919091527f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af0155565b612609565b816001600160a01b0316836001600160a01b031614612609576126098382612643565b6001600160a01b03821661262057610a6f816126e0565b826001600160a01b0316826001600160a01b031614610a6f57610a6f828261278f565b6000600161265084610ea9565b61265a9190612cfa565b6000838152600860205260409020549091508082146126ad576001600160a01b03841660009081526007602090815260408083208584528252808320548484528184208190558352600890915290208190555b5060009182526008602090815260408084208490556001600160a01b039094168352600781528383209183525290812055565b6009546000906126f290600190612cfa565b6000838152600a60205260408120546009805493945090928490811061271a5761271a612ce4565b90600052602060002001549050806009838154811061273b5761273b612ce4565b6000918252602080832090910192909255828152600a9091526040808220849055858252812055600980548061277357612773612e72565b6001900381819060005260206000200160009055905550505050565b600061279a83610ea9565b6001600160a01b039093166000908152600760209081526040808320868452825280832085905593825260089052919091209190915550565b8280546127df90612c78565b90600052602060002090601f0160209004810192826128015760008555612847565b82601f1061281a57805160ff1916838001178555612847565b82800160010185558215612847579182015b8281111561284757825182559160200191906001019061282c565b50612853929150612857565b5090565b5b808211156128535760008155600101612858565b6001600160e01b03198116811461188357600080fd5b60006020828403121561289457600080fd5b813561172a8161286c565b80356001600160a01b03811681146128b657600080fd5b919050565b6000602082840312156128cd57600080fd5b61172a8261289f565b60005b838110156128f15781810151838201526020016128d9565b838111156115185750506000910152565b6000815180845261291a8160208601602086016128d6565b601f01601f19169290920160200192915050565b60208152600061172a6020830184612902565b60006020828403121561295357600080fd5b5035919050565b6000806040838503121561296d57600080fd5b6129768361289f565b946020939093013593505050565b6000806040838503121561299757600080fd5b823591506129a76020840161289f565b90509250929050565b6000806000606084860312156129c557600080fd5b6129ce8461289f565b92506129dc6020850161289f565b9150604084013590509250925092565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff80841115612a1d57612a1d6129ec565b604051601f8501601f19908116603f01168101908282118183101715612a4557612a456129ec565b81604052809350858152868686011115612a5e57600080fd5b858560208301376000602087830101525050509392505050565b600060208284031215612a8a57600080fd5b813567ffffffffffffffff811115612aa157600080fd5b8201601f81018413612ab257600080fd5b611cab84823560208401612a02565b6020808252825182820181905260009190848201906040850190845b81811015612af957835183529284019291840191600101612add565b50909695505050505050565b600082601f830112612b1657600080fd5b61172a83833560208501612a02565b60008060408385031215612b3857600080fd5b82359150602083013567ffffffffffffffff811115612b5657600080fd5b612b6285828601612b05565b9150509250929050565b801515811461188357600080fd5b60008060408385031215612b8d57600080fd5b612b968361289f565b91506020830135612ba681612b6c565b809150509250929050565b60008060008060808587031215612bc757600080fd5b612bd08561289f565b9350612bde6020860161289f565b925060408501359150606085013567ffffffffffffffff811115612c0157600080fd5b612c0d87828801612b05565b91505092959194509250565b600060208284031215612c2b57600080fd5b813567ffffffffffffffff811115612c4257600080fd5b611cab84828501612b05565b60008060408385031215612c6157600080fd5b612c6a8361289f565b91506129a76020840161289f565b600181811c90821680612c8c57607f821691505b60208210811415612cad57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b6000600019821415612cdd57612cdd612cb3565b5060010190565b634e487b7160e01b600052603260045260246000fd5b600082821015612d0c57612d0c612cb3565b500390565b6000816000190483118215151615612d2b57612d2b612cb3565b500290565b60008351612d428184602088016128d6565b835190830190612d568183602088016128d6565b01949350505050565b600060208284031215612d7157600080fd5b815161172a81612b6c565b60008219821115612d8f57612d8f612cb3565b500190565b634e487b7160e01b600052601260045260246000fd5b600082612db957612db9612d94565b500490565b600082612dcd57612dcd612d94565b500690565b600060ff821660ff84168060ff03821115612def57612def612cb3565b019392505050565b60008351612e098184602088016128d6565b9190910191825250602001919050565b60006001600160a01b03808716835280861660208401525083604083015260806060830152612e4b6080830184612902565b9695505050505050565b600060208284031215612e6757600080fd5b815161172a8161286c565b634e487b7160e01b600052603160045260246000fdfea2646970667358221220f2a8da8695bbb373ef1b68106a63887e7db68973591bdd3d0c14512c48b230fa64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "src/core/GBC.sol:GBC",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 235,
        "contract": "src/core/GBC.sol:GBC",
        "label": "_name",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 237,
        "contract": "src/core/GBC.sol:GBC",
        "label": "_symbol",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 241,
        "contract": "src/core/GBC.sol:GBC",
        "label": "_owners",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 245,
        "contract": "src/core/GBC.sol:GBC",
        "label": "_balances",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 249,
        "contract": "src/core/GBC.sol:GBC",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 255,
        "contract": "src/core/GBC.sol:GBC",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1225,
        "contract": "src/core/GBC.sol:GBC",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 1229,
        "contract": "src/core/GBC.sol:GBC",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1232,
        "contract": "src/core/GBC.sol:GBC",
        "label": "_allTokens",
        "offset": 0,
        "slot": "9",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 1236,
        "contract": "src/core/GBC.sol:GBC",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 5323,
        "contract": "src/core/GBC.sol:GBC",
        "label": "_tokenIdTracker",
        "offset": 0,
        "slot": "11",
        "type": "t_struct(Counter)2127_storage"
      },
      {
        "astId": 5325,
        "contract": "src/core/GBC.sol:GBC",
        "label": "_baseTokenURI",
        "offset": 0,
        "slot": "12",
        "type": "t_string_storage"
      },
      {
        "astId": 5328,
        "contract": "src/core/GBC.sol:GBC",
        "label": "max",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 5331,
        "contract": "src/core/GBC.sol:GBC",
        "label": "maxMintPerTx",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 5334,
        "contract": "src/core/GBC.sol:GBC",
        "label": "publicSaleStarted",
        "offset": 0,
        "slot": "15",
        "type": "t_bool"
      },
      {
        "astId": 5337,
        "contract": "src/core/GBC.sol:GBC",
        "label": "wlMintStarted",
        "offset": 1,
        "slot": "15",
        "type": "t_bool"
      },
      {
        "astId": 5340,
        "contract": "src/core/GBC.sol:GBC",
        "label": "tokenURIFrozen",
        "offset": 2,
        "slot": "15",
        "type": "t_bool"
      },
      {
        "astId": 5343,
        "contract": "src/core/GBC.sol:GBC",
        "label": "cost",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 5345,
        "contract": "src/core/GBC.sol:GBC",
        "label": "wlSigner",
        "offset": 0,
        "slot": "17",
        "type": "t_address"
      },
      {
        "astId": 5349,
        "contract": "src/core/GBC.sol:GBC",
        "label": "blacklist",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)2127_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 2126,
            "contract": "src/core/GBC.sol:GBC",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}