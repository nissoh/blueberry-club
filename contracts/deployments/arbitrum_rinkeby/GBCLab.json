{
  "address": "0x328059D610FdAc8B218a0B204D50089240c1C60D",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "contract Authority",
          "name": "_authority",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract Authority",
          "name": "newAuthority",
          "type": "address"
        }
      ],
      "name": "AuthorityUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "authority",
      "outputs": [
        {
          "internalType": "contract Authority",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "owners",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "balances",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "batchBurn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "batchMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_salePrice",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Authority",
          "name": "newAuthority",
          "type": "address"
        }
      ],
      "name": "setAuthority",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "setOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "feeNumerator",
          "type": "uint96"
        }
      ],
      "name": "setRoyalty",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "feeNumerator",
          "type": "uint96"
        }
      ],
      "name": "setRoyalty",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "uri_",
          "type": "string"
        }
      ],
      "name": "setUri",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "uri_",
          "type": "string"
        }
      ],
      "name": "setUri",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xfa1ff4b4253442191c1e9f35a3996c8d63d61d4b5a24e14fc3102feadaffe90f",
  "receipt": {
    "to": null,
    "from": "0xF6743941C28bde28e337DBc29356f2319B41Fa3c",
    "contractAddress": "0x328059D610FdAc8B218a0B204D50089240c1C60D",
    "transactionIndex": 0,
    "gasUsed": "35912368",
    "logsBloom": "0x
    "blockHash": "0xe64082736730db151cf33951981a02fd54343100361c89ad27e008851f8d1d7b",
    "transactionHash": "0xfa1ff4b4253442191c1e9f35a3996c8d63d61d4b5a24e14fc3102feadaffe90f",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 13481622,
        "transactionHash": "0xfa1ff4b4253442191c1e9f35a3996c8d63d61d4b5a24e14fc3102feadaffe90f",
        "address": "0x328059D610FdAc8B218a0B204D50089240c1C60D",
        "topics": [
          "0x8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d76",
          "0x000000000000000000000000f6743941c28bde28e337dbc29356f2319b41fa3c",
          "0x000000000000000000000000f6743941c28bde28e337dbc29356f2319b41fa3c"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xe64082736730db151cf33951981a02fd54343100361c89ad27e008851f8d1d7b"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 13481622,
        "transactionHash": "0xfa1ff4b4253442191c1e9f35a3996c8d63d61d4b5a24e14fc3102feadaffe90f",
        "address": "0x328059D610FdAc8B218a0B204D50089240c1C60D",
        "topics": [
          "0xa3396fd7f6e0a21b50e5089d2da70d5ac0a3bbbd1f617a93f134b76389980198",
          "0x000000000000000000000000f6743941c28bde28e337dbc29356f2319b41fa3c",
          "0x000000000000000000000000fee2db94a7eed35b9957f2c51a9ef234a3c69dae"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0xe64082736730db151cf33951981a02fd54343100361c89ad27e008851f8d1d7b"
      }
    ],
    "blockNumber": 13481622,
    "cumulativeGasUsed": "16747387",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xF6743941C28bde28e337DBc29356f2319B41Fa3c",
    "0xFEE2Db94a7Eed35b9957f2c51a9Ef234A3C69DaE"
  ],
  "numDeployments": 1,
  "solcInputHash": "d9b63976ce6dd21bf7032ddac5023b9f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"contract Authority\",\"name\":\"_authority\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract Authority\",\"name\":\"newAuthority\",\"type\":\"address\"}],\"name\":\"AuthorityUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"internalType\":\"contract Authority\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"batchBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"batchMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Authority\",\"name\":\"newAuthority\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"feeNumerator\",\"type\":\"uint96\"}],\"name\":\"setRoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"feeNumerator\",\"type\":\"uint96\"}],\"name\":\"setRoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"uri_\",\"type\":\"string\"}],\"name\":\"setUri\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri_\",\"type\":\"string\"}],\"name\":\"setUri\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"IrvingDevPro\",\"kind\":\"dev\",\"methods\":{\"royaltyInfo(uint256,uint256)\":{\"details\":\"Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\"}},\"title\":\"Blueberry Lab Items\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"This contract manage the tokens usable by GBC holders\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/lab/Lab.sol\":\"GBCLab\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0xa812eed728198acd2c30d06950a5bea8d68436e4f694dd892273266ec2f79f5b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/common/ERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/common/ERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/IERC2981.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information.\\n *\\n * Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for\\n * specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.\\n *\\n * Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the\\n * fee is specified in basis points by default.\\n *\\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\\n *\\n * _Available since v4.5._\\n */\\nabstract contract ERC2981 is IERC2981, ERC165 {\\n    struct RoyaltyInfo {\\n        address receiver;\\n        uint96 royaltyFraction;\\n    }\\n\\n    RoyaltyInfo private _defaultRoyaltyInfo;\\n    mapping(uint256 => RoyaltyInfo) private _tokenRoyaltyInfo;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\\n        return interfaceId == type(IERC2981).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC2981\\n     */\\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice) public view virtual override returns (address, uint256) {\\n        RoyaltyInfo memory royalty = _tokenRoyaltyInfo[_tokenId];\\n\\n        if (royalty.receiver == address(0)) {\\n            royalty = _defaultRoyaltyInfo;\\n        }\\n\\n        uint256 royaltyAmount = (_salePrice * royalty.royaltyFraction) / _feeDenominator();\\n\\n        return (royalty.receiver, royaltyAmount);\\n    }\\n\\n    /**\\n     * @dev The denominator with which to interpret the fee set in {_setTokenRoyalty} and {_setDefaultRoyalty} as a\\n     * fraction of the sale price. Defaults to 10000 so fees are expressed in basis points, but may be customized by an\\n     * override.\\n     */\\n    function _feeDenominator() internal pure virtual returns (uint96) {\\n        return 10000;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information that all ids in this contract will default to.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setDefaultRoyalty(address receiver, uint96 feeNumerator) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: invalid receiver\\\");\\n\\n        _defaultRoyaltyInfo = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Removes default royalty information.\\n     */\\n    function _deleteDefaultRoyalty() internal virtual {\\n        delete _defaultRoyaltyInfo;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information for a specific token id, overriding the global default.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setTokenRoyalty(\\n        uint256 tokenId,\\n        address receiver,\\n        uint96 feeNumerator\\n    ) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: Invalid parameters\\\");\\n\\n        _tokenRoyaltyInfo[tokenId] = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Resets royalty information for the token id back to the global default.\\n     */\\n    function _resetTokenRoyalty(uint256 tokenId) internal virtual {\\n        delete _tokenRoyaltyInfo[tokenId];\\n    }\\n}\\n\",\"keccak256\":\"0x9bc4d7eb03c4e87fd5122e03cdff5f60fa360d76925980ad022b2c6fac9876f3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@rari-capital/solmate/src/auth/Auth.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Provides a flexible and updatable auth pattern which is completely separate from application logic.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/auth/Auth.sol)\\n/// @author Modified from Dappsys (https://github.com/dapphub/ds-auth/blob/master/src/auth.sol)\\nabstract contract Auth {\\n    event OwnerUpdated(address indexed user, address indexed newOwner);\\n\\n    event AuthorityUpdated(address indexed user, Authority indexed newAuthority);\\n\\n    address public owner;\\n\\n    Authority public authority;\\n\\n    constructor(address _owner, Authority _authority) {\\n        owner = _owner;\\n        authority = _authority;\\n\\n        emit OwnerUpdated(msg.sender, _owner);\\n        emit AuthorityUpdated(msg.sender, _authority);\\n    }\\n\\n    modifier requiresAuth() virtual {\\n        require(isAuthorized(msg.sender, msg.sig), \\\"UNAUTHORIZED\\\");\\n\\n        _;\\n    }\\n\\n    function isAuthorized(address user, bytes4 functionSig) internal view virtual returns (bool) {\\n        Authority auth = authority; // Memoizing authority saves us a warm SLOAD, around 100 gas.\\n\\n        // Checking if the caller is the owner only after calling the authority saves gas in most cases, but be\\n        // aware that this makes protected functions uncallable even to the owner if the authority is out of order.\\n        return (address(auth) != address(0) && auth.canCall(user, address(this), functionSig)) || user == owner;\\n    }\\n\\n    function setAuthority(Authority newAuthority) public virtual {\\n        // We check if the caller is the owner first because we want to ensure they can\\n        // always swap out the authority even if it's reverting or using up a lot of gas.\\n        require(msg.sender == owner || authority.canCall(msg.sender, address(this), msg.sig));\\n\\n        authority = newAuthority;\\n\\n        emit AuthorityUpdated(msg.sender, newAuthority);\\n    }\\n\\n    function setOwner(address newOwner) public virtual requiresAuth {\\n        owner = newOwner;\\n\\n        emit OwnerUpdated(msg.sender, newOwner);\\n    }\\n}\\n\\n/// @notice A generic interface for a contract which provides authorization data to an Auth instance.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/auth/Auth.sol)\\n/// @author Modified from Dappsys (https://github.com/dapphub/ds-auth/blob/master/src/auth.sol)\\ninterface Authority {\\n    function canCall(\\n        address user,\\n        address target,\\n        bytes4 functionSig\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xb4564103cc4b8eba1d359c964ef8d9b0eda15f7a0f331bee2c1e33f4785720cc\",\"license\":\"AGPL-3.0-only\"},\"@rari-capital/solmate/src/tokens/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Minimalist and gas efficient standard ERC1155 implementation.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC1155.sol)\\nabstract contract ERC1155 {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event TransferSingle(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256 id,\\n        uint256 amount\\n    );\\n\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] amounts\\n    );\\n\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    event URI(string value, uint256 indexed id);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             ERC1155 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    mapping(address => mapping(uint256 => uint256)) public balanceOf;\\n\\n    mapping(address => mapping(address => bool)) public isApprovedForAll;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             METADATA LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function uri(uint256 id) public view virtual returns (string memory);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ERC1155 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        isApprovedForAll[msg.sender][operator] = approved;\\n\\n        emit ApprovalForAll(msg.sender, operator, approved);\\n    }\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) public virtual {\\n        require(msg.sender == from || isApprovedForAll[from][msg.sender], \\\"NOT_AUTHORIZED\\\");\\n\\n        balanceOf[from][id] -= amount;\\n        balanceOf[to][id] += amount;\\n\\n        emit TransferSingle(msg.sender, from, to, id, amount);\\n\\n        require(\\n            to.code.length == 0\\n                ? to != address(0)\\n                : ERC1155TokenReceiver(to).onERC1155Received(msg.sender, from, id, amount, data) ==\\n                    ERC1155TokenReceiver.onERC1155Received.selector,\\n            \\\"UNSAFE_RECIPIENT\\\"\\n        );\\n    }\\n\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) public virtual {\\n        require(ids.length == amounts.length, \\\"LENGTH_MISMATCH\\\");\\n\\n        require(msg.sender == from || isApprovedForAll[from][msg.sender], \\\"NOT_AUTHORIZED\\\");\\n\\n        // Storing these outside the loop saves ~15 gas per iteration.\\n        uint256 id;\\n        uint256 amount;\\n\\n        for (uint256 i = 0; i < ids.length; ) {\\n            id = ids[i];\\n            amount = amounts[i];\\n\\n            balanceOf[from][id] -= amount;\\n            balanceOf[to][id] += amount;\\n\\n            // An array can't have a total length\\n            // larger than the max uint256 value.\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        emit TransferBatch(msg.sender, from, to, ids, amounts);\\n\\n        require(\\n            to.code.length == 0\\n                ? to != address(0)\\n                : ERC1155TokenReceiver(to).onERC1155BatchReceived(msg.sender, from, ids, amounts, data) ==\\n                    ERC1155TokenReceiver.onERC1155BatchReceived.selector,\\n            \\\"UNSAFE_RECIPIENT\\\"\\n        );\\n    }\\n\\n    function balanceOfBatch(address[] calldata owners, uint256[] calldata ids)\\n        public\\n        view\\n        virtual\\n        returns (uint256[] memory balances)\\n    {\\n        require(owners.length == ids.length, \\\"LENGTH_MISMATCH\\\");\\n\\n        balances = new uint256[](owners.length);\\n\\n        // Unchecked because the only math done is incrementing\\n        // the array index counter which cannot possibly overflow.\\n        unchecked {\\n            for (uint256 i = 0; i < owners.length; ++i) {\\n                balances[i] = balanceOf[owners[i]][ids[i]];\\n            }\\n        }\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ERC165 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return\\n            interfaceId == 0x01ffc9a7 || // ERC165 Interface ID for ERC165\\n            interfaceId == 0xd9b67a26 || // ERC165 Interface ID for ERC1155\\n            interfaceId == 0x0e89341c; // ERC165 Interface ID for ERC1155MetadataURI\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        balanceOf[to][id] += amount;\\n\\n        emit TransferSingle(msg.sender, address(0), to, id, amount);\\n\\n        require(\\n            to.code.length == 0\\n                ? to != address(0)\\n                : ERC1155TokenReceiver(to).onERC1155Received(msg.sender, address(0), id, amount, data) ==\\n                    ERC1155TokenReceiver.onERC1155Received.selector,\\n            \\\"UNSAFE_RECIPIENT\\\"\\n        );\\n    }\\n\\n    function _batchMint(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        uint256 idsLength = ids.length; // Saves MLOADs.\\n\\n        require(idsLength == amounts.length, \\\"LENGTH_MISMATCH\\\");\\n\\n        for (uint256 i = 0; i < idsLength; ) {\\n            balanceOf[to][ids[i]] += amounts[i];\\n\\n            // An array can't have a total length\\n            // larger than the max uint256 value.\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        emit TransferBatch(msg.sender, address(0), to, ids, amounts);\\n\\n        require(\\n            to.code.length == 0\\n                ? to != address(0)\\n                : ERC1155TokenReceiver(to).onERC1155BatchReceived(msg.sender, address(0), ids, amounts, data) ==\\n                    ERC1155TokenReceiver.onERC1155BatchReceived.selector,\\n            \\\"UNSAFE_RECIPIENT\\\"\\n        );\\n    }\\n\\n    function _batchBurn(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        uint256 idsLength = ids.length; // Saves MLOADs.\\n\\n        require(idsLength == amounts.length, \\\"LENGTH_MISMATCH\\\");\\n\\n        for (uint256 i = 0; i < idsLength; ) {\\n            balanceOf[from][ids[i]] -= amounts[i];\\n\\n            // An array can't have a total length\\n            // larger than the max uint256 value.\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        emit TransferBatch(msg.sender, from, address(0), ids, amounts);\\n    }\\n\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        balanceOf[from][id] -= amount;\\n\\n        emit TransferSingle(msg.sender, from, address(0), id, amount);\\n    }\\n}\\n\\n/// @notice A generic interface for a contract which properly accepts ERC1155 tokens.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC1155.sol)\\nabstract contract ERC1155TokenReceiver {\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes calldata\\n    ) external virtual returns (bytes4) {\\n        return ERC1155TokenReceiver.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] calldata,\\n        uint256[] calldata,\\n        bytes calldata\\n    ) external virtual returns (bytes4) {\\n        return ERC1155TokenReceiver.onERC1155BatchReceived.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x0ed909c57d26645a267388dcec3ba5b8ce7510afb9ed9561da45b0d386f90ab8\",\"license\":\"AGPL-3.0-only\"},\"src/lab/Lab.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {ERC1155} from \\\"@rari-capital/solmate/src/tokens/ERC1155.sol\\\";\\nimport {Auth, Authority} from \\\"@rari-capital/solmate/src/auth/Auth.sol\\\";\\nimport {ERC2981} from \\\"@openzeppelin/contracts/token/common/ERC2981.sol\\\";\\n\\n/**\\n * @title Blueberry Lab Items\\n * @author IrvingDevPro\\n * @notice This contract manage the tokens usable by GBC holders\\n */\\ncontract GBCLab is ERC1155, Auth, ERC2981 {\\n    constructor(address _owner, Authority _authority) Auth(_owner, _authority) {}\\n\\n    string private _uri;\\n    mapping(uint256 => string) private _uris;\\n\\n    function uri(uint256 id) public view override returns (string memory) {\\n        string memory uri_ = _uris[id];\\n        if (bytes(uri_).length > 0) return uri_;\\n        return _uri;\\n    }\\n\\n    function setUri(string memory uri_) external requiresAuth {\\n        _uri = uri_;\\n    }\\n\\n    function setUri(uint256 id, string memory uri_) external requiresAuth {\\n        _uris[id] = uri_;\\n        if (bytes(uri_).length == 0) {\\n            emit URI(_uri, id);\\n        } else {\\n            emit URI(uri_, id);\\n        }\\n    }\\n\\n    function mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) external requiresAuth {\\n        _mint(to, id, amount, data);\\n    }\\n\\n    function batchMint(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) external requiresAuth {\\n        _batchMint(to, ids, amounts, data);\\n    }\\n\\n    function burn(\\n        address to,\\n        uint256 id,\\n        uint256 amount\\n    ) external requiresAuth {\\n        _burn(to, id, amount);\\n    }\\n\\n    function batchBurn(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) external requiresAuth {\\n        _batchBurn(to, ids, amounts);\\n    }\\n\\n    function setRoyalty(\\n        uint256 id,\\n        address receiver,\\n        uint96 feeNumerator\\n    ) external requiresAuth {\\n        if (receiver == address(0)) return _resetTokenRoyalty(id);\\n        _setTokenRoyalty(id, receiver, feeNumerator);\\n    }\\n\\n    function setRoyalty(address receiver, uint96 feeNumerator) external requiresAuth {\\n        if (receiver == address(0)) return _deleteDefaultRoyalty();\\n        _setDefaultRoyalty(receiver, feeNumerator);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public pure override(ERC1155, ERC2981) returns (bool) {\\n        return\\n            interfaceId == 0x2a55205a || // ERC165 Interface ID for ERC2981\\n            interfaceId == 0x01ffc9a7 || // ERC165 Interface ID for ERC165\\n            interfaceId == 0xd9b67a26 || // ERC165 Interface ID for ERC1155\\n            interfaceId == 0x0e89341c; // ERC165 Interface ID for ERC1155MetadataURI\\n    }\\n}\\n\",\"keccak256\":\"0x130bc0a74395d00948d305a470e1de8497e2551f4abd4621641c2d6c107ff131\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162002a1338038062002a138339810160408190526200003491620000ea565b600280546001600160a01b038085166001600160a01b0319928316811790935560038054918516919092161790556040518391839133907f8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d7690600090a36040516001600160a01b0382169033907fa3396fd7f6e0a21b50e5089d2da70d5ac0a3bbbd1f617a93f134b7638998019890600090a35050505062000129565b6001600160a01b0381168114620000e757600080fd5b50565b60008060408385031215620000fe57600080fd5b82516200010b81620000d1565b60208401519092506200011e81620000d1565b809150509250929050565b6128da80620001396000396000f3fe608060405234801561001057600080fd5b50600436106101765760003560e01c806380c8d690116100d8578063b48ab8b61161008c578063f242432a11610066578063f242432a14610377578063f5298aca1461038a578063f6eb127a1461039d57600080fd5b8063b48ab8b614610323578063bf7e214f14610336578063e985e9c51461034957600080fd5b80638f2fc60b116100bd5780638f2fc60b146102ea5780639b642de1146102fd578063a22cb4651461031057600080fd5b806380c8d690146102ac5780638da5cb5b146102bf57600080fd5b80632eb2c2d61161012f578063731133e911610114578063731133e914610273578063782f08ae146102865780637a9e5e4b1461029957600080fd5b80632eb2c2d6146102405780634e1273f41461025357600080fd5b80630e89341c116101605780630e89341c146101d957806313af4035146101f95780632a55205a1461020e57600080fd5b8062fdd58e1461017b57806301ffc9a7146101b6575b600080fd5b6101a3610189366004611cd8565b600060208181529281526040808220909352908152205481565b6040519081526020015b60405180910390f35b6101c96101c4366004611d1a565b6103b0565b60405190151581526020016101ad565b6101ec6101e7366004611d3e565b610481565b6040516101ad9190611da4565b61020c610207366004611db7565b6105c2565b005b61022161021c366004611dd4565b61067c565b604080516001600160a01b0390931683526020830191909152016101ad565b61020c61024e366004611e7d565b610739565b610266610261366004611f3c565b610a51565b6040516101ad9190611fe3565b61020c6102813660046120ad565b610b94565b61020c610294366004612110565b610bf7565b61020c6102a7366004611db7565b610cdf565b61020c6102ba366004612178565b610e0c565b6002546102d2906001600160a01b031681565b6040516001600160a01b0390911681526020016101ad565b61020c6102f83660046121b6565b610e8e565b61020c61030b3660046121eb565b610f01565b61020c61031e36600461222e565b610f65565b61020c6103313660046122e7565b610fd1565b6003546102d2906001600160a01b031681565b6101c9610357366004612376565b600160209081526000928352604080842090915290825290205460ff1681565b61020c6103853660046123a4565b61102e565b61020c610398366004612420565b61128f565b61020c6103ab366004612455565b6112eb565b60007f2a55205a000000000000000000000000000000000000000000000000000000006001600160e01b03198316148061041357507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b8061044757507fd9b67a26000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b8061047b57507f0e89341c000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b92915050565b60008181526007602052604081208054606092919061049f906124cb565b80601f01602080910402602001604051908101604052809291908181526020018280546104cb906124cb565b80156105185780601f106104ed57610100808354040283529160200191610518565b820191906000526020600020905b8154815290600101906020018083116104fb57829003601f168201915b5050505050905060008151111561052f5792915050565b6006805461053c906124cb565b80601f0160208091040260200160405190810160405280929190818152602001828054610568906124cb565b80156105b55780601f1061058a576101008083540402835291602001916105b5565b820191906000526020600020905b81548152906001019060200180831161059857829003601f168201915b5050505050915050919050565b6105d8336000356001600160e01b031916611347565b6106185760405162461bcd60e51b815260206004820152600c60248201526b15539055551213d49256915160a21b60448201526064015b60405180910390fd5b600280547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03831690811790915560405133907f8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d7690600090a350565b60008281526005602090815260408083208151808301909252546001600160a01b038116808352600160a01b9091046bffffffffffffffffffffffff169282019290925282916106fb5750604080518082019091526004546001600160a01b0381168252600160a01b90046bffffffffffffffffffffffff1660208201525b60208101516000906127109061071f906bffffffffffffffffffffffff168761251c565b6107299190612559565b91519350909150505b9250929050565b8483146107885760405162461bcd60e51b815260206004820152600f60248201527f4c454e4754485f4d49534d415443480000000000000000000000000000000000604482015260640161060f565b336001600160a01b03891614806107c257506001600160a01b038816600090815260016020908152604080832033845290915290205460ff165b61080e5760405162461bcd60e51b815260206004820152600e60248201527f4e4f545f415554484f52495a4544000000000000000000000000000000000000604482015260640161060f565b60008060005b878110156108c95788888281811061082e5761082e61257b565b9050602002013592508686828181106108495761084961257b565b6001600160a01b038e1660009081526020818152604080832089845282528220805493909102949094013595508593925090610886908490612591565b90915550506001600160a01b038a16600090815260208181526040808320868452909152812080548492906108bc9084906125a8565b9091555050600101610814565b50886001600160a01b03168a6001600160a01b0316336001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8b8b8b8b60405161091d949392919061260f565b60405180910390a46001600160a01b0389163b156109ec576040517fbc197c8100000000000000000000000000000000000000000000000000000000808252906001600160a01b038b169063bc197c819061098a9033908f908e908e908e908e908e908e90600401612661565b602060405180830381600087803b1580156109a457600080fd5b505af11580156109b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109dc91906126c5565b6001600160e01b031916146109f9565b6001600160a01b03891615155b610a455760405162461bcd60e51b815260206004820152601060248201527f554e534146455f524543495049454e5400000000000000000000000000000000604482015260640161060f565b50505050505050505050565b6060838214610aa25760405162461bcd60e51b815260206004820152600f60248201527f4c454e4754485f4d49534d415443480000000000000000000000000000000000604482015260640161060f565b8367ffffffffffffffff811115610abb57610abb611ff6565b604051908082528060200260200182016040528015610ae4578160200160208202803683370190505b50905060005b84811015610b8b57600080878784818110610b0757610b0761257b565b9050602002016020810190610b1c9190611db7565b6001600160a01b03166001600160a01b031681526020019081526020016000206000858584818110610b5057610b5061257b565b90506020020135815260200190815260200160002054828281518110610b7857610b7861257b565b6020908102919091010152600101610aea565b50949350505050565b610baa336000356001600160e01b031916611347565b610be55760405162461bcd60e51b815260206004820152600c60248201526b15539055551213d49256915160a21b604482015260640161060f565b610bf184848484611428565b50505050565b610c0d336000356001600160e01b031916611347565b610c485760405162461bcd60e51b815260206004820152600c60248201526b15539055551213d49256915160a21b604482015260640161060f565b60008281526007602090815260409091208251610c6792840190611c27565b508051610cab57817f6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b6006604051610c9f91906126e2565b60405180910390a25050565b817f6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b82604051610c9f9190611da4565b5050565b6002546001600160a01b0316331480610d9f57506003546040517fb70096130000000000000000000000000000000000000000000000000000000081523360048201523060248201526000356001600160e01b03191660448201526001600160a01b039091169063b70096139060640160206040518083038186803b158015610d6757600080fd5b505afa158015610d7b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d9f919061278a565b610da857600080fd5b600380547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03831690811790915560405133907fa3396fd7f6e0a21b50e5089d2da70d5ac0a3bbbd1f617a93f134b7638998019890600090a350565b610e22336000356001600160e01b031916611347565b610e5d5760405162461bcd60e51b815260206004820152600c60248201526b15539055551213d49256915160a21b604482015260640161060f565b6001600160a01b038216610e7e575050600090815260056020526040812055565b610e898383836115c2565b505050565b610ea4336000356001600160e01b031916611347565b610edf5760405162461bcd60e51b815260206004820152600c60248201526b15539055551213d49256915160a21b604482015260640161060f565b6001600160a01b038216610ef757610cdb6000600455565b610cdb82826116ed565b610f17336000356001600160e01b031916611347565b610f525760405162461bcd60e51b815260206004820152600c60248201526b15539055551213d49256915160a21b604482015260640161060f565b8051610cdb906006906020840190611c27565b3360008181526001602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b610fe7336000356001600160e01b031916611347565b6110225760405162461bcd60e51b815260206004820152600c60248201526b15539055551213d49256915160a21b604482015260640161060f565b610bf184848484611807565b336001600160a01b038716148061106857506001600160a01b038616600090815260016020908152604080832033845290915290205460ff165b6110b45760405162461bcd60e51b815260206004820152600e60248201527f4e4f545f415554484f52495a4544000000000000000000000000000000000000604482015260640161060f565b6001600160a01b038616600090815260208181526040808320878452909152812080548592906110e5908490612591565b90915550506001600160a01b0385166000908152602081815260408083208784529091528120805485929061111b9084906125a8565b909155505060408051858152602081018590526001600160a01b03808816929089169133917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46001600160a01b0385163b1561122e576040517ff23a6e6100000000000000000000000000000000000000000000000000000000808252906001600160a01b0387169063f23a6e61906111cc9033908b908a908a908a908a906004016127a7565b602060405180830381600087803b1580156111e657600080fd5b505af11580156111fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061121e91906126c5565b6001600160e01b0319161461123b565b6001600160a01b03851615155b6112875760405162461bcd60e51b815260206004820152601060248201527f554e534146455f524543495049454e5400000000000000000000000000000000604482015260640161060f565b505050505050565b6112a5336000356001600160e01b031916611347565b6112e05760405162461bcd60e51b815260206004820152600c60248201526b15539055551213d49256915160a21b604482015260640161060f565b610e89838383611a63565b611301336000356001600160e01b031916611347565b61133c5760405162461bcd60e51b815260206004820152600c60248201526b15539055551213d49256915160a21b604482015260640161060f565b610e89838383611ae7565b6003546000906001600160a01b0316801580159061140857506040517fb70096130000000000000000000000000000000000000000000000000000000081526001600160a01b0385811660048301523060248301526001600160e01b03198516604483015282169063b70096139060640160206040518083038186803b1580156113d057600080fd5b505afa1580156113e4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611408919061278a565b8061142057506002546001600160a01b038581169116145b949350505050565b6001600160a01b038416600090815260208181526040808320868452909152812080548492906114599084906125a8565b909155505060408051848152602081018490526001600160a01b0386169160009133917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46001600160a01b0384163b15611569576040517ff23a6e6100000000000000000000000000000000000000000000000000000000808252906001600160a01b0386169063f23a6e61906115079033906000908990899089906004016127ec565b602060405180830381600087803b15801561152157600080fd5b505af1158015611535573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061155991906126c5565b6001600160e01b03191614611576565b6001600160a01b03841615155b610bf15760405162461bcd60e51b815260206004820152601060248201527f554e534146455f524543495049454e5400000000000000000000000000000000604482015260640161060f565b6127106bffffffffffffffffffffffff821611156116485760405162461bcd60e51b815260206004820152602a60248201527f455243323938313a20726f79616c7479206665652077696c6c2065786365656460448201527f2073616c65507269636500000000000000000000000000000000000000000000606482015260840161060f565b6001600160a01b03821661169e5760405162461bcd60e51b815260206004820152601b60248201527f455243323938313a20496e76616c696420706172616d65746572730000000000604482015260640161060f565b6040805180820182526001600160a01b0393841681526bffffffffffffffffffffffff92831660208083019182526000968752600590529190942093519051909116600160a01b029116179055565b6127106bffffffffffffffffffffffff821611156117735760405162461bcd60e51b815260206004820152602a60248201527f455243323938313a20726f79616c7479206665652077696c6c2065786365656460448201527f2073616c65507269636500000000000000000000000000000000000000000000606482015260840161060f565b6001600160a01b0382166117c95760405162461bcd60e51b815260206004820152601960248201527f455243323938313a20696e76616c696420726563656976657200000000000000604482015260640161060f565b604080518082019091526001600160a01b039092168083526bffffffffffffffffffffffff9091166020909201829052600160a01b90910217600455565b8251825181146118595760405162461bcd60e51b815260206004820152600f60248201527f4c454e4754485f4d49534d415443480000000000000000000000000000000000604482015260640161060f565b60005b818110156118e8578381815181106118765761187661257b565b6020026020010151600080886001600160a01b03166001600160a01b0316815260200190815260200160002060008784815181106118b6576118b661257b565b6020026020010151815260200190815260200160002060008282546118db91906125a8565b909155505060010161185c565b50846001600160a01b031660006001600160a01b0316336001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611939929190612824565b60405180910390a46001600160a01b0385163b15611a03576040517fbc197c8100000000000000000000000000000000000000000000000000000000808252906001600160a01b0387169063bc197c81906119a19033906000908a908a908a90600401612852565b602060405180830381600087803b1580156119bb57600080fd5b505af11580156119cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119f391906126c5565b6001600160e01b03191614611a10565b6001600160a01b03851615155b611a5c5760405162461bcd60e51b815260206004820152601060248201527f554e534146455f524543495049454e5400000000000000000000000000000000604482015260640161060f565b5050505050565b6001600160a01b03831660009081526020818152604080832085845290915281208054839290611a94908490612591565b909155505060408051838152602081018390526000916001600160a01b0386169133917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4505050565b815181518114611b395760405162461bcd60e51b815260206004820152600f60248201527f4c454e4754485f4d49534d415443480000000000000000000000000000000000604482015260640161060f565b60005b81811015611bc857828181518110611b5657611b5661257b565b6020026020010151600080876001600160a01b03166001600160a01b031681526020019081526020016000206000868481518110611b9657611b9661257b565b602002602001015181526020019081526020016000206000828254611bbb9190612591565b9091555050600101611b3c565b5060006001600160a01b0316846001600160a01b0316336001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8686604051611c19929190612824565b60405180910390a450505050565b828054611c33906124cb565b90600052602060002090601f016020900481019282611c555760008555611c9b565b82601f10611c6e57805160ff1916838001178555611c9b565b82800160010185558215611c9b579182015b82811115611c9b578251825591602001919060010190611c80565b50611ca7929150611cab565b5090565b5b80821115611ca75760008155600101611cac565b6001600160a01b0381168114611cd557600080fd5b50565b60008060408385031215611ceb57600080fd5b8235611cf681611cc0565b946020939093013593505050565b6001600160e01b031981168114611cd557600080fd5b600060208284031215611d2c57600080fd5b8135611d3781611d04565b9392505050565b600060208284031215611d5057600080fd5b5035919050565b6000815180845260005b81811015611d7d57602081850181015186830182015201611d61565b81811115611d8f576000602083870101525b50601f01601f19169290920160200192915050565b602081526000611d376020830184611d57565b600060208284031215611dc957600080fd5b8135611d3781611cc0565b60008060408385031215611de757600080fd5b50508035926020909101359150565b60008083601f840112611e0857600080fd5b50813567ffffffffffffffff811115611e2057600080fd5b6020830191508360208260051b850101111561073257600080fd5b60008083601f840112611e4d57600080fd5b50813567ffffffffffffffff811115611e6557600080fd5b60208301915083602082850101111561073257600080fd5b60008060008060008060008060a0898b031215611e9957600080fd5b8835611ea481611cc0565b97506020890135611eb481611cc0565b9650604089013567ffffffffffffffff80821115611ed157600080fd5b611edd8c838d01611df6565b909850965060608b0135915080821115611ef657600080fd5b611f028c838d01611df6565b909650945060808b0135915080821115611f1b57600080fd5b50611f288b828c01611e3b565b999c989b5096995094979396929594505050565b60008060008060408587031215611f5257600080fd5b843567ffffffffffffffff80821115611f6a57600080fd5b611f7688838901611df6565b90965094506020870135915080821115611f8f57600080fd5b50611f9c87828801611df6565b95989497509550505050565b600081518084526020808501945080840160005b83811015611fd857815187529582019590820190600101611fbc565b509495945050505050565b602081526000611d376020830184611fa8565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561203557612035611ff6565b604052919050565b600082601f83011261204e57600080fd5b813567ffffffffffffffff81111561206857612068611ff6565b61207b6020601f19601f8401160161200c565b81815284602083860101111561209057600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080608085870312156120c357600080fd5b84356120ce81611cc0565b93506020850135925060408501359150606085013567ffffffffffffffff8111156120f857600080fd5b6121048782880161203d565b91505092959194509250565b6000806040838503121561212357600080fd5b82359150602083013567ffffffffffffffff81111561214157600080fd5b61214d8582860161203d565b9150509250929050565b80356bffffffffffffffffffffffff8116811461217357600080fd5b919050565b60008060006060848603121561218d57600080fd5b83359250602084013561219f81611cc0565b91506121ad60408501612157565b90509250925092565b600080604083850312156121c957600080fd5b82356121d481611cc0565b91506121e260208401612157565b90509250929050565b6000602082840312156121fd57600080fd5b813567ffffffffffffffff81111561221457600080fd5b6114208482850161203d565b8015158114611cd557600080fd5b6000806040838503121561224157600080fd5b823561224c81611cc0565b9150602083013561225c81612220565b809150509250929050565b600082601f83011261227857600080fd5b8135602067ffffffffffffffff82111561229457612294611ff6565b8160051b6122a382820161200c565b92835284810182019282810190878511156122bd57600080fd5b83870192505b848310156122dc578235825291830191908301906122c3565b979650505050505050565b600080600080608085870312156122fd57600080fd5b843561230881611cc0565b9350602085013567ffffffffffffffff8082111561232557600080fd5b61233188838901612267565b9450604087013591508082111561234757600080fd5b61235388838901612267565b9350606087013591508082111561236957600080fd5b506121048782880161203d565b6000806040838503121561238957600080fd5b823561239481611cc0565b9150602083013561225c81611cc0565b60008060008060008060a087890312156123bd57600080fd5b86356123c881611cc0565b955060208701356123d881611cc0565b94506040870135935060608701359250608087013567ffffffffffffffff81111561240257600080fd5b61240e89828a01611e3b565b979a9699509497509295939492505050565b60008060006060848603121561243557600080fd5b833561244081611cc0565b95602085013595506040909401359392505050565b60008060006060848603121561246a57600080fd5b833561247581611cc0565b9250602084013567ffffffffffffffff8082111561249257600080fd5b61249e87838801612267565b935060408601359150808211156124b457600080fd5b506124c186828701612267565b9150509250925092565b600181811c908216806124df57607f821691505b6020821081141561250057634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561255457612554612506565b500290565b60008261257657634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603260045260246000fd5b6000828210156125a3576125a3612506565b500390565b600082198211156125bb576125bb612506565b500190565b81835260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8311156125f257600080fd5b8260051b8083602087013760009401602001938452509192915050565b6040815260006126236040830186886125c0565b82810360208401526122dc8185876125c0565b818352818160208501375060006020828401015260006020601f19601f840116840101905092915050565b60006001600160a01b03808b168352808a1660208401525060a0604083015261268e60a08301888a6125c0565b82810360608401526126a18187896125c0565b905082810360808401526126b6818587612636565b9b9a5050505050505050505050565b6000602082840312156126d757600080fd5b8151611d3781611d04565b600060208083526000845481600182811c91508083168061270457607f831692505b85831081141561272257634e487b7160e01b85526022600452602485fd5b87860183815260200181801561273f57600181146127505761277b565b60ff1986168252878201965061277b565b60008b81526020902060005b868110156127755781548482015290850190890161275c565b83019750505b50949998505050505050505050565b60006020828403121561279c57600080fd5b8151611d3781612220565b60006001600160a01b03808916835280881660208401525085604083015284606083015260a060808301526127e060a083018486612636565b98975050505050505050565b60006001600160a01b03808816835280871660208401525084604083015283606083015260a060808301526122dc60a0830184611d57565b6040815260006128376040830185611fa8565b82810360208401526128498185611fa8565b95945050505050565b60006001600160a01b03808816835280871660208401525060a0604083015261287e60a0830186611fa8565b82810360608401526128908186611fa8565b905082810360808401526127e08185611d5756fea2646970667358221220710e3aea2ffb694ea7d76bfde18419414c3b1e1e4ca95c06c1203332bc8bf23564736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101765760003560e01c806380c8d690116100d8578063b48ab8b61161008c578063f242432a11610066578063f242432a14610377578063f5298aca1461038a578063f6eb127a1461039d57600080fd5b8063b48ab8b614610323578063bf7e214f14610336578063e985e9c51461034957600080fd5b80638f2fc60b116100bd5780638f2fc60b146102ea5780639b642de1146102fd578063a22cb4651461031057600080fd5b806380c8d690146102ac5780638da5cb5b146102bf57600080fd5b80632eb2c2d61161012f578063731133e911610114578063731133e914610273578063782f08ae146102865780637a9e5e4b1461029957600080fd5b80632eb2c2d6146102405780634e1273f41461025357600080fd5b80630e89341c116101605780630e89341c146101d957806313af4035146101f95780632a55205a1461020e57600080fd5b8062fdd58e1461017b57806301ffc9a7146101b6575b600080fd5b6101a3610189366004611cd8565b600060208181529281526040808220909352908152205481565b6040519081526020015b60405180910390f35b6101c96101c4366004611d1a565b6103b0565b60405190151581526020016101ad565b6101ec6101e7366004611d3e565b610481565b6040516101ad9190611da4565b61020c610207366004611db7565b6105c2565b005b61022161021c366004611dd4565b61067c565b604080516001600160a01b0390931683526020830191909152016101ad565b61020c61024e366004611e7d565b610739565b610266610261366004611f3c565b610a51565b6040516101ad9190611fe3565b61020c6102813660046120ad565b610b94565b61020c610294366004612110565b610bf7565b61020c6102a7366004611db7565b610cdf565b61020c6102ba366004612178565b610e0c565b6002546102d2906001600160a01b031681565b6040516001600160a01b0390911681526020016101ad565b61020c6102f83660046121b6565b610e8e565b61020c61030b3660046121eb565b610f01565b61020c61031e36600461222e565b610f65565b61020c6103313660046122e7565b610fd1565b6003546102d2906001600160a01b031681565b6101c9610357366004612376565b600160209081526000928352604080842090915290825290205460ff1681565b61020c6103853660046123a4565b61102e565b61020c610398366004612420565b61128f565b61020c6103ab366004612455565b6112eb565b60007f2a55205a000000000000000000000000000000000000000000000000000000006001600160e01b03198316148061041357507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b8061044757507fd9b67a26000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b8061047b57507f0e89341c000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b92915050565b60008181526007602052604081208054606092919061049f906124cb565b80601f01602080910402602001604051908101604052809291908181526020018280546104cb906124cb565b80156105185780601f106104ed57610100808354040283529160200191610518565b820191906000526020600020905b8154815290600101906020018083116104fb57829003601f168201915b5050505050905060008151111561052f5792915050565b6006805461053c906124cb565b80601f0160208091040260200160405190810160405280929190818152602001828054610568906124cb565b80156105b55780601f1061058a576101008083540402835291602001916105b5565b820191906000526020600020905b81548152906001019060200180831161059857829003601f168201915b5050505050915050919050565b6105d8336000356001600160e01b031916611347565b6106185760405162461bcd60e51b815260206004820152600c60248201526b15539055551213d49256915160a21b60448201526064015b60405180910390fd5b600280547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03831690811790915560405133907f8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d7690600090a350565b60008281526005602090815260408083208151808301909252546001600160a01b038116808352600160a01b9091046bffffffffffffffffffffffff169282019290925282916106fb5750604080518082019091526004546001600160a01b0381168252600160a01b90046bffffffffffffffffffffffff1660208201525b60208101516000906127109061071f906bffffffffffffffffffffffff168761251c565b6107299190612559565b91519350909150505b9250929050565b8483146107885760405162461bcd60e51b815260206004820152600f60248201527f4c454e4754485f4d49534d415443480000000000000000000000000000000000604482015260640161060f565b336001600160a01b03891614806107c257506001600160a01b038816600090815260016020908152604080832033845290915290205460ff165b61080e5760405162461bcd60e51b815260206004820152600e60248201527f4e4f545f415554484f52495a4544000000000000000000000000000000000000604482015260640161060f565b60008060005b878110156108c95788888281811061082e5761082e61257b565b9050602002013592508686828181106108495761084961257b565b6001600160a01b038e1660009081526020818152604080832089845282528220805493909102949094013595508593925090610886908490612591565b90915550506001600160a01b038a16600090815260208181526040808320868452909152812080548492906108bc9084906125a8565b9091555050600101610814565b50886001600160a01b03168a6001600160a01b0316336001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8b8b8b8b60405161091d949392919061260f565b60405180910390a46001600160a01b0389163b156109ec576040517fbc197c8100000000000000000000000000000000000000000000000000000000808252906001600160a01b038b169063bc197c819061098a9033908f908e908e908e908e908e908e90600401612661565b602060405180830381600087803b1580156109a457600080fd5b505af11580156109b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109dc91906126c5565b6001600160e01b031916146109f9565b6001600160a01b03891615155b610a455760405162461bcd60e51b815260206004820152601060248201527f554e534146455f524543495049454e5400000000000000000000000000000000604482015260640161060f565b50505050505050505050565b6060838214610aa25760405162461bcd60e51b815260206004820152600f60248201527f4c454e4754485f4d49534d415443480000000000000000000000000000000000604482015260640161060f565b8367ffffffffffffffff811115610abb57610abb611ff6565b604051908082528060200260200182016040528015610ae4578160200160208202803683370190505b50905060005b84811015610b8b57600080878784818110610b0757610b0761257b565b9050602002016020810190610b1c9190611db7565b6001600160a01b03166001600160a01b031681526020019081526020016000206000858584818110610b5057610b5061257b565b90506020020135815260200190815260200160002054828281518110610b7857610b7861257b565b6020908102919091010152600101610aea565b50949350505050565b610baa336000356001600160e01b031916611347565b610be55760405162461bcd60e51b815260206004820152600c60248201526b15539055551213d49256915160a21b604482015260640161060f565b610bf184848484611428565b50505050565b610c0d336000356001600160e01b031916611347565b610c485760405162461bcd60e51b815260206004820152600c60248201526b15539055551213d49256915160a21b604482015260640161060f565b60008281526007602090815260409091208251610c6792840190611c27565b508051610cab57817f6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b6006604051610c9f91906126e2565b60405180910390a25050565b817f6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b82604051610c9f9190611da4565b5050565b6002546001600160a01b0316331480610d9f57506003546040517fb70096130000000000000000000000000000000000000000000000000000000081523360048201523060248201526000356001600160e01b03191660448201526001600160a01b039091169063b70096139060640160206040518083038186803b158015610d6757600080fd5b505afa158015610d7b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d9f919061278a565b610da857600080fd5b600380547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03831690811790915560405133907fa3396fd7f6e0a21b50e5089d2da70d5ac0a3bbbd1f617a93f134b7638998019890600090a350565b610e22336000356001600160e01b031916611347565b610e5d5760405162461bcd60e51b815260206004820152600c60248201526b15539055551213d49256915160a21b604482015260640161060f565b6001600160a01b038216610e7e575050600090815260056020526040812055565b610e898383836115c2565b505050565b610ea4336000356001600160e01b031916611347565b610edf5760405162461bcd60e51b815260206004820152600c60248201526b15539055551213d49256915160a21b604482015260640161060f565b6001600160a01b038216610ef757610cdb6000600455565b610cdb82826116ed565b610f17336000356001600160e01b031916611347565b610f525760405162461bcd60e51b815260206004820152600c60248201526b15539055551213d49256915160a21b604482015260640161060f565b8051610cdb906006906020840190611c27565b3360008181526001602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b610fe7336000356001600160e01b031916611347565b6110225760405162461bcd60e51b815260206004820152600c60248201526b15539055551213d49256915160a21b604482015260640161060f565b610bf184848484611807565b336001600160a01b038716148061106857506001600160a01b038616600090815260016020908152604080832033845290915290205460ff165b6110b45760405162461bcd60e51b815260206004820152600e60248201527f4e4f545f415554484f52495a4544000000000000000000000000000000000000604482015260640161060f565b6001600160a01b038616600090815260208181526040808320878452909152812080548592906110e5908490612591565b90915550506001600160a01b0385166000908152602081815260408083208784529091528120805485929061111b9084906125a8565b909155505060408051858152602081018590526001600160a01b03808816929089169133917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46001600160a01b0385163b1561122e576040517ff23a6e6100000000000000000000000000000000000000000000000000000000808252906001600160a01b0387169063f23a6e61906111cc9033908b908a908a908a908a906004016127a7565b602060405180830381600087803b1580156111e657600080fd5b505af11580156111fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061121e91906126c5565b6001600160e01b0319161461123b565b6001600160a01b03851615155b6112875760405162461bcd60e51b815260206004820152601060248201527f554e534146455f524543495049454e5400000000000000000000000000000000604482015260640161060f565b505050505050565b6112a5336000356001600160e01b031916611347565b6112e05760405162461bcd60e51b815260206004820152600c60248201526b15539055551213d49256915160a21b604482015260640161060f565b610e89838383611a63565b611301336000356001600160e01b031916611347565b61133c5760405162461bcd60e51b815260206004820152600c60248201526b15539055551213d49256915160a21b604482015260640161060f565b610e89838383611ae7565b6003546000906001600160a01b0316801580159061140857506040517fb70096130000000000000000000000000000000000000000000000000000000081526001600160a01b0385811660048301523060248301526001600160e01b03198516604483015282169063b70096139060640160206040518083038186803b1580156113d057600080fd5b505afa1580156113e4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611408919061278a565b8061142057506002546001600160a01b038581169116145b949350505050565b6001600160a01b038416600090815260208181526040808320868452909152812080548492906114599084906125a8565b909155505060408051848152602081018490526001600160a01b0386169160009133917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46001600160a01b0384163b15611569576040517ff23a6e6100000000000000000000000000000000000000000000000000000000808252906001600160a01b0386169063f23a6e61906115079033906000908990899089906004016127ec565b602060405180830381600087803b15801561152157600080fd5b505af1158015611535573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061155991906126c5565b6001600160e01b03191614611576565b6001600160a01b03841615155b610bf15760405162461bcd60e51b815260206004820152601060248201527f554e534146455f524543495049454e5400000000000000000000000000000000604482015260640161060f565b6127106bffffffffffffffffffffffff821611156116485760405162461bcd60e51b815260206004820152602a60248201527f455243323938313a20726f79616c7479206665652077696c6c2065786365656460448201527f2073616c65507269636500000000000000000000000000000000000000000000606482015260840161060f565b6001600160a01b03821661169e5760405162461bcd60e51b815260206004820152601b60248201527f455243323938313a20496e76616c696420706172616d65746572730000000000604482015260640161060f565b6040805180820182526001600160a01b0393841681526bffffffffffffffffffffffff92831660208083019182526000968752600590529190942093519051909116600160a01b029116179055565b6127106bffffffffffffffffffffffff821611156117735760405162461bcd60e51b815260206004820152602a60248201527f455243323938313a20726f79616c7479206665652077696c6c2065786365656460448201527f2073616c65507269636500000000000000000000000000000000000000000000606482015260840161060f565b6001600160a01b0382166117c95760405162461bcd60e51b815260206004820152601960248201527f455243323938313a20696e76616c696420726563656976657200000000000000604482015260640161060f565b604080518082019091526001600160a01b039092168083526bffffffffffffffffffffffff9091166020909201829052600160a01b90910217600455565b8251825181146118595760405162461bcd60e51b815260206004820152600f60248201527f4c454e4754485f4d49534d415443480000000000000000000000000000000000604482015260640161060f565b60005b818110156118e8578381815181106118765761187661257b565b6020026020010151600080886001600160a01b03166001600160a01b0316815260200190815260200160002060008784815181106118b6576118b661257b565b6020026020010151815260200190815260200160002060008282546118db91906125a8565b909155505060010161185c565b50846001600160a01b031660006001600160a01b0316336001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611939929190612824565b60405180910390a46001600160a01b0385163b15611a03576040517fbc197c8100000000000000000000000000000000000000000000000000000000808252906001600160a01b0387169063bc197c81906119a19033906000908a908a908a90600401612852565b602060405180830381600087803b1580156119bb57600080fd5b505af11580156119cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119f391906126c5565b6001600160e01b03191614611a10565b6001600160a01b03851615155b611a5c5760405162461bcd60e51b815260206004820152601060248201527f554e534146455f524543495049454e5400000000000000000000000000000000604482015260640161060f565b5050505050565b6001600160a01b03831660009081526020818152604080832085845290915281208054839290611a94908490612591565b909155505060408051838152602081018390526000916001600160a01b0386169133917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4505050565b815181518114611b395760405162461bcd60e51b815260206004820152600f60248201527f4c454e4754485f4d49534d415443480000000000000000000000000000000000604482015260640161060f565b60005b81811015611bc857828181518110611b5657611b5661257b565b6020026020010151600080876001600160a01b03166001600160a01b031681526020019081526020016000206000868481518110611b9657611b9661257b565b602002602001015181526020019081526020016000206000828254611bbb9190612591565b9091555050600101611b3c565b5060006001600160a01b0316846001600160a01b0316336001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8686604051611c19929190612824565b60405180910390a450505050565b828054611c33906124cb565b90600052602060002090601f016020900481019282611c555760008555611c9b565b82601f10611c6e57805160ff1916838001178555611c9b565b82800160010185558215611c9b579182015b82811115611c9b578251825591602001919060010190611c80565b50611ca7929150611cab565b5090565b5b80821115611ca75760008155600101611cac565b6001600160a01b0381168114611cd557600080fd5b50565b60008060408385031215611ceb57600080fd5b8235611cf681611cc0565b946020939093013593505050565b6001600160e01b031981168114611cd557600080fd5b600060208284031215611d2c57600080fd5b8135611d3781611d04565b9392505050565b600060208284031215611d5057600080fd5b5035919050565b6000815180845260005b81811015611d7d57602081850181015186830182015201611d61565b81811115611d8f576000602083870101525b50601f01601f19169290920160200192915050565b602081526000611d376020830184611d57565b600060208284031215611dc957600080fd5b8135611d3781611cc0565b60008060408385031215611de757600080fd5b50508035926020909101359150565b60008083601f840112611e0857600080fd5b50813567ffffffffffffffff811115611e2057600080fd5b6020830191508360208260051b850101111561073257600080fd5b60008083601f840112611e4d57600080fd5b50813567ffffffffffffffff811115611e6557600080fd5b60208301915083602082850101111561073257600080fd5b60008060008060008060008060a0898b031215611e9957600080fd5b8835611ea481611cc0565b97506020890135611eb481611cc0565b9650604089013567ffffffffffffffff80821115611ed157600080fd5b611edd8c838d01611df6565b909850965060608b0135915080821115611ef657600080fd5b611f028c838d01611df6565b909650945060808b0135915080821115611f1b57600080fd5b50611f288b828c01611e3b565b999c989b5096995094979396929594505050565b60008060008060408587031215611f5257600080fd5b843567ffffffffffffffff80821115611f6a57600080fd5b611f7688838901611df6565b90965094506020870135915080821115611f8f57600080fd5b50611f9c87828801611df6565b95989497509550505050565b600081518084526020808501945080840160005b83811015611fd857815187529582019590820190600101611fbc565b509495945050505050565b602081526000611d376020830184611fa8565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561203557612035611ff6565b604052919050565b600082601f83011261204e57600080fd5b813567ffffffffffffffff81111561206857612068611ff6565b61207b6020601f19601f8401160161200c565b81815284602083860101111561209057600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080608085870312156120c357600080fd5b84356120ce81611cc0565b93506020850135925060408501359150606085013567ffffffffffffffff8111156120f857600080fd5b6121048782880161203d565b91505092959194509250565b6000806040838503121561212357600080fd5b82359150602083013567ffffffffffffffff81111561214157600080fd5b61214d8582860161203d565b9150509250929050565b80356bffffffffffffffffffffffff8116811461217357600080fd5b919050565b60008060006060848603121561218d57600080fd5b83359250602084013561219f81611cc0565b91506121ad60408501612157565b90509250925092565b600080604083850312156121c957600080fd5b82356121d481611cc0565b91506121e260208401612157565b90509250929050565b6000602082840312156121fd57600080fd5b813567ffffffffffffffff81111561221457600080fd5b6114208482850161203d565b8015158114611cd557600080fd5b6000806040838503121561224157600080fd5b823561224c81611cc0565b9150602083013561225c81612220565b809150509250929050565b600082601f83011261227857600080fd5b8135602067ffffffffffffffff82111561229457612294611ff6565b8160051b6122a382820161200c565b92835284810182019282810190878511156122bd57600080fd5b83870192505b848310156122dc578235825291830191908301906122c3565b979650505050505050565b600080600080608085870312156122fd57600080fd5b843561230881611cc0565b9350602085013567ffffffffffffffff8082111561232557600080fd5b61233188838901612267565b9450604087013591508082111561234757600080fd5b61235388838901612267565b9350606087013591508082111561236957600080fd5b506121048782880161203d565b6000806040838503121561238957600080fd5b823561239481611cc0565b9150602083013561225c81611cc0565b60008060008060008060a087890312156123bd57600080fd5b86356123c881611cc0565b955060208701356123d881611cc0565b94506040870135935060608701359250608087013567ffffffffffffffff81111561240257600080fd5b61240e89828a01611e3b565b979a9699509497509295939492505050565b60008060006060848603121561243557600080fd5b833561244081611cc0565b95602085013595506040909401359392505050565b60008060006060848603121561246a57600080fd5b833561247581611cc0565b9250602084013567ffffffffffffffff8082111561249257600080fd5b61249e87838801612267565b935060408601359150808211156124b457600080fd5b506124c186828701612267565b9150509250925092565b600181811c908216806124df57607f821691505b6020821081141561250057634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561255457612554612506565b500290565b60008261257657634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603260045260246000fd5b6000828210156125a3576125a3612506565b500390565b600082198211156125bb576125bb612506565b500190565b81835260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8311156125f257600080fd5b8260051b8083602087013760009401602001938452509192915050565b6040815260006126236040830186886125c0565b82810360208401526122dc8185876125c0565b818352818160208501375060006020828401015260006020601f19601f840116840101905092915050565b60006001600160a01b03808b168352808a1660208401525060a0604083015261268e60a08301888a6125c0565b82810360608401526126a18187896125c0565b905082810360808401526126b6818587612636565b9b9a5050505050505050505050565b6000602082840312156126d757600080fd5b8151611d3781611d04565b600060208083526000845481600182811c91508083168061270457607f831692505b85831081141561272257634e487b7160e01b85526022600452602485fd5b87860183815260200181801561273f57600181146127505761277b565b60ff1986168252878201965061277b565b60008b81526020902060005b868110156127755781548482015290850190890161275c565b83019750505b50949998505050505050505050565b60006020828403121561279c57600080fd5b8151611d3781612220565b60006001600160a01b03808916835280881660208401525085604083015284606083015260a060808301526127e060a083018486612636565b98975050505050505050565b60006001600160a01b03808816835280871660208401525084604083015283606083015260a060808301526122dc60a0830184611d57565b6040815260006128376040830185611fa8565b82810360208401526128498185611fa8565b95945050505050565b60006001600160a01b03808816835280871660208401525060a0604083015261287e60a0830186611fa8565b82810360608401526128908186611fa8565b905082810360808401526127e08185611d5756fea2646970667358221220710e3aea2ffb694ea7d76bfde18419414c3b1e1e4ca95c06c1203332bc8bf23564736f6c63430008090033",
  "devdoc": {
    "author": "IrvingDevPro",
    "kind": "dev",
    "methods": {
      "royaltyInfo(uint256,uint256)": {
        "details": "Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of exchange. The royalty amount is denominated and should be paid in that same unit of exchange."
      }
    },
    "title": "Blueberry Lab Items",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "This contract manage the tokens usable by GBC holders",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3455,
        "contract": "src/lab/Lab.sol:GBCLab",
        "label": "balanceOf",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 3461,
        "contract": "src/lab/Lab.sol:GBCLab",
        "label": "isApprovedForAll",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 2977,
        "contract": "src/lab/Lab.sol:GBCLab",
        "label": "owner",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 2980,
        "contract": "src/lab/Lab.sol:GBCLab",
        "label": "authority",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(Authority)3131"
      },
      {
        "astId": 1623,
        "contract": "src/lab/Lab.sol:GBCLab",
        "label": "_defaultRoyaltyInfo",
        "offset": 0,
        "slot": "4",
        "type": "t_struct(RoyaltyInfo)1620_storage"
      },
      {
        "astId": 1628,
        "contract": "src/lab/Lab.sol:GBCLab",
        "label": "_tokenRoyaltyInfo",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)1620_storage)"
      },
      {
        "astId": 6708,
        "contract": "src/lab/Lab.sol:GBCLab",
        "label": "_uri",
        "offset": 0,
        "slot": "6",
        "type": "t_string_storage"
      },
      {
        "astId": 6712,
        "contract": "src/lab/Lab.sol:GBCLab",
        "label": "_uris",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_string_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(Authority)3131": {
        "encoding": "inplace",
        "label": "contract Authority",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_struct(RoyaltyInfo)1620_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ERC2981.RoyaltyInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(RoyaltyInfo)1620_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(RoyaltyInfo)1620_storage": {
        "encoding": "inplace",
        "label": "struct ERC2981.RoyaltyInfo",
        "members": [
          {
            "astId": 1617,
            "contract": "src/lab/Lab.sol:GBCLab",
            "label": "receiver",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1619,
            "contract": "src/lab/Lab.sol:GBCLab",
            "label": "royaltyFraction",
            "offset": 20,
            "slot": "0",
            "type": "t_uint96"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}